{"version":3,"sources":["../../src/git.js"],"names":["path","require","fs","GIT_FOLDER","GIT_HEAD","GIT_CONFIG","git","isGit","pathToCheck","existsSync","join","findRoot","nextPath","dirname","getRevision","followSymLinks","getRemoteOrigin","content","readFileSync","matches","match","groups","undefined","url","root","link","startsWith","nextLink","split","trim"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AAEA,MAAME,UAAU,GAAG,MAAnB;AACA,MAAMC,QAAQ,GAAG,MAAjB;AACA,MAAMC,UAAU,GAAG,QAAnB;;AAEe,MAAMC,GAAN,CAAS;AACpB,SAAOC,KAAP,CAAaC,WAAb,EAAyB;AACrB,WAAON,EAAE,CAACO,UAAH,CAAcT,IAAI,CAACU,IAAL,CAAUF,WAAV,EAAuBL,UAAvB,CAAd,CAAP;AACH;;AAED,SAAOQ,QAAP,CAAgBH,WAAhB,EAA6B;AACzB,QAAI,KAAKD,KAAL,CAAWC,WAAX,CAAJ,EAA4B;AACxB,aAAOA,WAAP;AACH;;AACD,QAAII,QAAQ,GAAGZ,IAAI,CAACa,OAAL,CAAaL,WAAb,CAAf;;AACA,QAAII,QAAQ,KAAKJ,WAAjB,EAA8B;AAC1B,aAAO,KAAKG,QAAL,CAAcC,QAAd,CAAP;AACH;;AACD,WAAO,EAAP;AACH;;AAED,SAAOE,WAAP,CAAmBN,WAAnB,EAAgC;AAC5B,WAAO,KAAKO,cAAL,CAAoBf,IAAI,CAACU,IAAL,CAAUF,WAAV,EAAuBL,UAAvB,CAApB,EAAwDC,QAAxD,CAAP;AACH;;AAED,SAAOY,eAAP,CAAuBR,WAAvB,EAAoC;AAChC,UAAMS,OAAO,GAAGf,EAAE,CAACgB,YAAH,CAAgBlB,IAAI,CAACU,IAAL,CAAUF,WAAV,EAAuBL,UAAvB,EAAmCE,UAAnC,CAAhB,EAAgE,OAAhE,CAAhB;AACA,UAAMc,OAAO,GAAGF,OAAO,CAACG,KAAR,aAAc,uWAAd;AAAA;AAAA,OAAhB;;AAEA,QAAID,OAAO,CAACE,MAAR,KAAmBC,SAAnB,IAAgCH,OAAO,CAACE,MAAR,CAAeE,GAAf,KAAuBD,SAA3D,EAAsE;AAClE,aAAOH,OAAO,CAACE,MAAR,CAAeE,GAAtB;AACH,KAFD,MAEO;AACH,aAAO,EAAP;AACH;AACJ;;AAED,SAAOR,cAAP,CAAsBS,IAAtB,EAA4BC,IAA5B,EAAkC;AAC9B,QAAIR,OAAO,GAAGf,EAAE,CAACgB,YAAH,CAAgBlB,IAAI,CAACU,IAAL,CAAUc,IAAV,EAAgBC,IAAhB,CAAhB,EAAuC,OAAvC,CAAd;;AAEA,QAAIR,OAAO,CAACS,UAAR,CAAmB,MAAnB,CAAJ,EAAgC;AAC5B,UAAIC,QAAQ,GAAGV,OAAO,CAACW,KAAR,CAAc,GAAd,EAAmB,CAAnB,EAAsBC,IAAtB,EAAf;AACA,aAAO,KAAKd,cAAL,CAAoBS,IAApB,EAA0BG,QAA1B,CAAP;AACH,KAHD,MAGO;AACH,aAAOV,OAAO,CAACY,IAAR,EAAP;AACH;AACJ;;AAxCmB","sourcesContent":["\"use strict\";\n\nconst path = require('path');\nconst fs = require('fs');\n\nconst GIT_FOLDER = '.git';\nconst GIT_HEAD = 'HEAD';\nconst GIT_CONFIG = 'config';\n\nexport default class git{\n    static isGit(pathToCheck){\n        return fs.existsSync(path.join(pathToCheck, GIT_FOLDER));\n    }\n\n    static findRoot(pathToCheck) {\n        if (this.isGit(pathToCheck)){\n            return pathToCheck;\n        }\n        var nextPath = path.dirname(pathToCheck);\n        if (nextPath !== pathToCheck) {\n            return this.findRoot(nextPath);\n        }\n        return \"\";\n    }\n\n    static getRevision(pathToCheck) {\n        return this.followSymLinks(path.join(pathToCheck, GIT_FOLDER), GIT_HEAD)\n    }\n\n    static getRemoteOrigin(pathToCheck) {\n        const content = fs.readFileSync(path.join(pathToCheck, GIT_FOLDER, GIT_CONFIG), 'utf-8');\n        const matches = content.match(/\\[remote \\\"origin\\\"\\]\\n\\s*url\\s*=\\s(?<url>\\S*)/);\n\n        if (matches.groups !== undefined && matches.groups.url !== undefined) {\n            return matches.groups.url;\n        } else {\n            return \"\";\n        }\n    }\n\n    static followSymLinks(root, link) {\n        var content = fs.readFileSync(path.join(root, link), 'utf-8');\n\n        if (content.startsWith(\"ref:\")) {\n            var nextLink = content.split(' ')[1].trim();\n            return this.followSymLinks(root, nextLink);\n        } else {\n            return content.trim();\n        }\n    }\n}"],"file":"git.js"}