{"version":3,"sources":["../../../src/services/ScriptWrapper.js"],"names":["fs","require","path","ScriptWrapper","constructor","id","filename","source","sourceFiles","normalizedFilename","rawSource","mapConsumer","loadMap","mapData","readFileSync","e","logger","debug","message","map","mapObject","SourceMapConsumer","sourceFile","sources","push","normalizedPath","rawPath","sourceContentFor","getMatchInfo","includeExternals","isAbsolute","includes","arePathsConverging","rawContents","sourceFilePath","join","dirname","adjacentSourceFile","basename","existsSync","getRawFileContents","script","inSourceMap","fileContents","path1","path2","i","length","j","sep","getGeneratedPosition","line","column","position","generatedPositionFor","bias","LEAST_UPPER_BOUND","RookResolveSourceFailed","getOriginalPosition","originalPositionFor","RookSourceError"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nimport {logger} from \"../logger\";\r\n\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\nimport {resolveSourceMapSync} from 'source-map-resolve';\r\nimport {SourceMapConsumer} from 'source-map';\r\n\r\nimport {canonizeFileName} from \"../utils\";\r\nimport {RookResolveSourceFailed, RookSourceError} from '../exceptions'\r\n\r\nexport default class ScriptWrapper {\r\n\r\n    constructor(id, filename, source) {\r\n        this.id = id;\r\n\r\n        this.sourceFiles = [];\r\n\r\n        this.filename = filename;\r\n        this.normalizedFilename = canonizeFileName(filename);\r\n        this.rawSource = source;\r\n\r\n        this.mapConsumer = null;\r\n\r\n        this.loadMap(source);\r\n    }\r\n\r\n    loadMap(source) {\r\n        if (!this.filename || !source) {\r\n            return;\r\n        }\r\n\r\n        let mapData = null;\r\n\r\n        try {\r\n            mapData = resolveSourceMapSync(source, this.filename, fs.readFileSync);\r\n        } catch (e) {\r\n            logger.debug(\"Unable to find source map\", this.filename, e.message);\r\n        }\r\n\r\n        if (!mapData || !mapData.map) {\r\n            return;\r\n        }\r\n\r\n        const mapObject = mapData.map;\r\n        this.mapConsumer = new SourceMapConsumer(mapObject);\r\n\r\n        for (let sourceFile of mapObject.sources) {\r\n            this.sourceFiles.push({\r\n                normalizedPath : canonizeFileName(sourceFile),\r\n                rawPath: sourceFile,\r\n                rawSource: this.mapConsumer.sourceContentFor(sourceFile, true)\r\n            });\r\n        }\r\n    }\r\n\r\n    getMatchInfo(filename, includeExternals) {\r\n        // Exclude NodeJS core libs\r\n        if (!path.isAbsolute(this.filename)) {\r\n            return null;\r\n        }\r\n\r\n        if (this.filename.includes('/node_modules/') && !includeExternals) {\r\n            return null;\r\n        }\r\n\r\n        filename = canonizeFileName(filename);\r\n\r\n        for (let sourceFile of this.sourceFiles) {\r\n            if (this.arePathsConverging(sourceFile.normalizedPath, filename)) {\r\n                // If we are dealing with a transpiled file, we prefer getting the source from disk\r\n                // Otherwise, we have to stick with the source map, even if it's of lower accuracy\r\n                let rawContents = null;\r\n\r\n                const sourceFilePath = path.join(path.dirname(this.filename), sourceFile.normalizedPath);\r\n                const adjacentSourceFile = path.join(path.dirname(this.filename), path.basename(sourceFile.normalizedPath));\r\n\r\n                if (this.arePathsConverging(sourceFile.normalizedPath, filename) && fs.existsSync(sourceFilePath)) {\r\n                    rawContents = this.getRawFileContents(sourceFilePath);\r\n                } else if (this.arePathsConverging(filename, sourceFile.normalizedPath) &&\r\n                    adjacentSourceFile !== this.filename &&\r\n                        fs.existsSync(adjacentSourceFile)) {\r\n                    rawContents = this.getRawFileContents(adjacentSourceFile);\r\n                } else {\r\n                    rawContents = sourceFile.rawSource;\r\n                }\r\n\r\n                return {\r\n                    script: this,\r\n                    inSourceMap: true,\r\n                    filename: sourceFile.rawPath,\r\n                    fileContents: rawContents,\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.arePathsConverging(this.normalizedFilename, filename)) {\r\n            return {\r\n                script: this,\r\n                inSourceMap: false,\r\n                filename: this.filename,\r\n                fileContents: this.getRawFileContents(this.filename)\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    arePathsConverging(path1, path2) {\r\n        // Find longest match\r\n        let i = path1.length - 1;\r\n        let j = path2.length - 1;\r\n        while (i >= 0 && j >= 0 && path1[i] === path2[j]) {\r\n            --i;\r\n            --j;\r\n        }\r\n\r\n        // Check that at least one of the strings has ended and the other is at a directory boundary\r\n        return (i === -1 && path2[j] === path.sep) || (j === -1 && path1[i] === path.sep) || (i === -1 && j === -1);\r\n    }\r\n\r\n    getGeneratedPosition(filename, line, column) {\r\n        const position = this.mapConsumer.generatedPositionFor({\r\n            source: filename,\r\n            line: line,\r\n            column: column,\r\n            bias: SourceMapConsumer.LEAST_UPPER_BOUND});\r\n\r\n        // generatedPositionFor might return zeroed position instance upon failure and not null\r\n        if (position !== null && position.line !== null) {\r\n            return position;\r\n        } else {\r\n            throw new RookResolveSourceFailed(this.filename);\r\n        }\r\n    }\r\n\r\n    getOriginalPosition(line, column) {\r\n        return this.mapConsumer.originalPositionFor({line: line, column: column});\r\n    }\r\n\r\n    getRawFileContents(filename) {\r\n        try {\r\n            return fs.readFileSync(filename, 'utf8');\r\n        } catch (e) {\r\n            throw new RookSourceError(this.filename, e);\r\n        }\r\n    }\r\n}\r\n"],"file":"ScriptWrapper.js"}