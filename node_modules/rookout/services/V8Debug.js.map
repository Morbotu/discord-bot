{"version":3,"sources":["../../../src/services/V8Debug.js"],"names":["vm","require","debug","runInDebugContext","V8Debug","constructor","userLine","scriptLoaded","getScript","self","getScriptCallback","positionsToBreakpoints","breakpointsToPositions","setListener","event","execState","eventData","DebugEvent","Break","pos","break_points_hit_","script_break_point_","number_","FrameNamespace","frame","StackNamespace","AfterCompile","name","script_","id","source","e","logger","exception","setBreak","breakpoint","setScriptBreakPointByName","filename","lineno","column","RookSetBreakpointFailed","toKey","clearBreak","undefined","clearBreakPoint","clearAllBreaks","positions","Object","keys","i","length","scriptId","close","scripts","result","script","push"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nconst vm = require('vm');\r\nconst debug = vm.runInDebugContext('Debug');\r\n\r\nimport {logger} from \"../logger\";\r\n\r\nimport {isBlackListedModule} from \"./IgnoredNodeModules\";\r\n\r\nimport {RookSetBreakpointFailed} from '../exceptions';\r\nimport FrameNamespace from \"../processor/namespaces/V8FrameNamespace\";\r\nimport StackNamespace from \"../processor/namespaces/V8StackNamespace\";\r\n\r\nexport class V8Debug {\r\n\r\n    constructor(userLine, scriptLoaded, getScript) {\r\n        const self = this;\r\n\r\n        this.getScriptCallback = getScript;\r\n\r\n        this.positionsToBreakpoints = {};\r\n        this.breakpointsToPositions = {};\r\n\r\n        debug.setListener((event, execState, eventData) => {\r\n            try {\r\n                try {\r\n                    if (debug.DebugEvent.Break === event) {\r\n                        const pos = this.breakpointsToPositions[eventData.break_points_hit_[0].script_break_point_.number_];\r\n\r\n                        userLine(pos,\r\n                            new FrameNamespace(self, execState.frame(0)),\r\n                            new StackNamespace(self, execState));\r\n                    } else if (debug.DebugEvent.AfterCompile === event) {\r\n                        const name = eventData.script_.name();\r\n                        if (name && !isBlackListedModule(name)) {\r\n                          scriptLoaded(eventData.script_.id(), name, eventData.script_.source());\r\n                        }\r\n                    }\r\n\r\n                } catch (e) {\r\n                    logger.exception(\"Error while processing breakpoint\", e);\r\n                }\r\n            } catch (e) {\r\n              \r\n            }\r\n        });\r\n    }\r\n\r\n    setBreak(pos) {\r\n        // NOTE - we do not expect to have any pre-processing logic required here because the script has already been resolved\r\n\r\n        let breakpoint = debug.setScriptBreakPointByName(pos.filename, pos.lineno - 1, pos.column + 1);\r\n        if (null == breakpoint) {\r\n            throw new RookSetBreakpointFailed();\r\n        }\r\n\r\n        this.positionsToBreakpoints[pos.toKey()] = breakpoint;\r\n        this.breakpointsToPositions[breakpoint] = pos;\r\n    }\r\n\r\n    clearBreak(pos) {\r\n        // If we have an object, hash it\r\n        if (pos.toKey) {\r\n            pos = pos.toKey();\r\n        }\r\n\r\n        const breakpoint = this.positionsToBreakpoints[pos];\r\n        if (undefined === breakpoint) {\r\n            return;\r\n        }\r\n\r\n        delete this.positionsToBreakpoints[pos];\r\n        delete this.breakpointsToPositions[breakpoint];\r\n\r\n        debug.clearBreakPoint(breakpoint);\r\n    }\r\n\r\n    clearAllBreaks(){\r\n        let positions = Object.keys(this.positionsToBreakpoints);\r\n        for (let i = 0; i < positions.length; ++i) {\r\n            this.clearBreak(positions[i]);\r\n        }\r\n\r\n        this.positionsToBreakpoints = {};\r\n        this.breakpointsToPositions = {};\r\n    }\r\n\r\n    getScript(scriptId) {\r\n        return this.getScriptCallback(scriptId);\r\n    }\r\n\r\n    close() {\r\n        this.clearAllBreaks();\r\n\r\n        debug.setListener(null);\r\n    }\r\n\r\n    scripts() {\r\n        let result = [];\r\n\r\n        for (let script of debug.scripts()) {\r\n            if (null != script.name && !isBlackListedModule(script.name)) {\r\n                result.push({scriptId: script.id, filename: script.name, source:script.source});\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"],"file":"V8Debug.js"}