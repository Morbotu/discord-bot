{"version":3,"sources":["../../../../src/processor/namespaces/InspectorObjectNamespace.js"],"names":["InspectorObjectNamespace","Namespace","constructor","inspector","obj","dumpConfig","JSObjectNamespace","defaultDumpConfig","loadProperties","properties","undefined","getProperties","callMethod","name","args","Array","length","Object","keys","className","readAttribute","property","value","DynamicInspectorObjectNamespace","RookInspectorUnknownProperty","getObject","RookAttributeNotFound","readKey","key","Number","isInteger","toString","getObjectInternal","type","RookInspectorUnknownObject"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport Namespace from './Namespace';\nimport {RookAttributeNotFound, RookInspectorUnknownObject} from \"../../exceptions\";\nimport JSObjectNamespace from \"./JSObjectNamespace\";\nimport DynamicInspectorObjectNamespace from \"./DynamicInspectorObjectNamespace\";\n\nexport default class InspectorObjectNamespace extends Namespace {\n\n    constructor(inspector, obj, dumpConfig=null) {\n        super();\n\n        this.inspector = inspector;\n        this.obj = obj;\n\n        if (dumpConfig === null) {\n            this.dumpConfig = JSObjectNamespace.defaultDumpConfig();\n        } else {\n            this.dumpConfig = dumpConfig;\n        }\n    }\n\n    loadProperties() {\n        if (this.properties === undefined) {\n            this.properties = this.inspector.getProperties(this.obj);\n        }\n    }\n\n    callMethod(name, args) {\n        switch (name) {\n            case \"size\":\n                if (this.obj instanceof Array) {\n                    return new JSObjectNamespace(this.obj.length);\n                } else {\n                    return new JSObjectNamespace(Object.keys(this.obj).length);\n                }\n            case \"type\":\n                return new JSObjectNamespace(this.obj.className);\n            default:\n                return super.callMethod(name, args);\n        }\n    }\n\n    readAttribute(name) {\n        this.loadProperties();\n\n        for (let property of this.properties) {\n            if (property.name === name) {\n                // skip getter attributes, ex:\n                // {\n                //   get val() { return 0; }\n                // }\n                if ((null === property.value || undefined === property.value)) {\n                    if ('get' in property) {\n                        return new DynamicInspectorObjectNamespace(this.inspector);\n                    }\n\n                    throw new RookInspectorUnknownProperty(property);\n                } else {\n                    return InspectorObjectNamespace.getObject(this.inspector, property.value);\n                }\n            }\n        }\n\n        throw new RookAttributeNotFound(name);\n    }\n\n    readKey(key) {\n        if (this.obj.className === 'Array') {\n            if (Number.isInteger(key)) {\n                return this.readAttribute(key.toString());\n            }\n        }\n        return this.readAttribute(key);\n    }\n\n    static getObjectInternal(inspector, obj) {\n        switch (obj.type) {\n            case 'number':\n            case 'string':\n            case 'undefined':\n            case 'boolean':\n            case 'symbol':\n                return obj.value;\n\n            case 'object':\n                if (null === obj.value) {\n                    return null;\n                }\n\n            case 'function':\n                return new InspectorObjectNamespace(inspector, obj);\n\n            default:\n                throw new RookInspectorUnknownObject(obj);\n        }\n    }\n\n    static getObject(inspector, obj) {\n        switch (obj.type) {\n            case 'number':\n            case 'string':\n            case 'undefined':\n            case 'boolean':\n            case 'symbol':\n                return new JSObjectNamespace(obj.value);\n\n            case 'object':\n                if (null === obj.value) {\n                    return new JSObjectNamespace(null);\n                }\n\n            case 'function':\n                return new InspectorObjectNamespace(inspector, obj);\n\n            default:\n                throw new RookInspectorUnknownObject(obj);\n        }\n    }\n\n}\n"],"file":"InspectorObjectNamespace.js"}