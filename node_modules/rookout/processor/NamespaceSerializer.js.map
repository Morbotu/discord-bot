{"version":3,"sources":["../../../src/processor/NamespaceSerializer.js"],"names":["variant_pb","require","timestamp_pb","INT32_MIN","INT32_MAX","INT64_MIN","INT64_MAX","isFloat","n","e","NamespaceSerializer","dumps","namespace","logErrors","variant","Variant","dump","ContainerNamespace","dumpContainerNamespace","JSObjectNamespace","dumpJSObjectNamespace","ListNamespace","dumpListNamespace","DictNamespace","dumpDictNamespace","InspectorObjectNamespace","dumpInspectorObjectNamespace","dumpConfig","DynamicInspectorObjectNamespace","dumpDynamicInspectorObjectNamespace","TypeError","message","clearVariant","setVariantType","Type","VARIANT_ERROR","setErrorValue","RookError","logger","exception","VARIANT_NAMESPACE","result","Namespace","key","Object","keys","namespaces","value","NamedValue","setName","setValue","addAttributes","setNamespaceValue","dumpJSObject","obj","unsafeDumpJSObject","currentDepth","maxDepth","dumpMaxDepth","dumpBaseObject","undefined","VARIANT_UNDEFINED","VARIANT_NONE","VARIANT_INT","setIntValue","Number","isInteger","VARIANT_LONG","setLongValue","VARIANT_LARGE_INT","digits","push","Math","floor","LargeInt","reverse","join","setLargeIntValue","VARIANT_DOUBLE","setDoubleValue","String","VARIANT_STRING","string","setOriginalSize","length","maxString","substring","setStringValue","Date","VARIANT_TIME","date","Timestamp","fromDate","setTimeValue","Array","isArray","dumpArray","Error","dumpException","VARIANT_CODE_OBJECT","codeValue","CodeObject","name","setCodeValue","dumpUserClass","VARIANT_MAX_DEPTH","setOriginalType","__proto__","constructor","parseInt","toString","getOwnPropertyDescriptor","VARIANT_DYNAMIC","attribute","VARIANT_LIST","list","List","setType","getCommonType","maxCollectionDepth","maxItems","min","maxWidth","i","item","addValues","setListValue","VARIANT_OBJECT","messageValue","messagePair","stackValue","stack","stackPair","originalType","listValue","commonType","originalSize","VARIANT_MAP","dictValue","Map","dict","pair","Pair","first","second","setFirst","setSecond","addPairs","setMapValue","unsafeDumpInspectorObjectNamespace","className","type","functionName","readAttribute","subtype","dumpInspectorArray","dumpInspectorDate","loadProperties","property","properties","RookInspectorUnknownProperty","getObjectInternal","inspector","lengthString","description","match","clearAttributesList","clearIntValue","clearLongValue","clearDoubleValue","clearStringValue","clearListValue","clearMapValue","clearNamespaceValue","clearErrorValue","clearMessageValue","clearTimeValue","clearCodeValue","clearLargeIntValue","clearComplexValue"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport InspectorObjectNamespace from \"./namespaces/InspectorObjectNamespace\";\n\nconst variant_pb = require('../protobuf/variant_pb');\nconst timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb');\n\nimport {logger} from \"../logger\";\n\nimport RookError from './RookError';\n\n// Copied from Python Google Protobuf\nconst INT32_MIN = -2147483648;\nconst INT32_MAX = 2147483647;\nconst INT64_MIN = -9223372036854775808;\nconst INT64_MAX = 9223372036854775807;\n\nimport ContainerNamespace from './namespaces/ContainerNamespace';\nimport JSObjectNamespace from './namespaces/JSObjectNamespace';\nimport ListNamespace from './namespaces/ListNamespace';\nimport DynamicInspectorObjectNamespace from \"./namespaces/DynamicInspectorObjectNamespace\";\nimport DictNamespace from \"./namespaces/DictNamespace\";\n\nfunction isFloat(n) {\n    try {\n        // This seems to throw sometimes :(\n        return n === +n && n !== (n|0);\n    } catch (e) {\n        return false;\n    }\n}\n\nexport default class NamespaceSerializer {\n    dumps(namespace, logErrors = true) {\n        let variant = new variant_pb.Variant();\n        this.dump(namespace, variant, logErrors);\n        return variant;\n    }\n\n    dump(namespace, variant, logErrors = true) {\n        try {\n            if (namespace instanceof ContainerNamespace) {\n                this.dumpContainerNamespace(namespace, variant, logErrors);\n            } else if (namespace instanceof JSObjectNamespace) {\n                this.dumpJSObjectNamespace(namespace, variant, logErrors);\n            } else if (namespace instanceof ListNamespace) {\n                this.dumpListNamespace(namespace, variant, logErrors);\n            } else if (namespace instanceof DictNamespace) {\n                this.dumpDictNamespace(namespace, variant, logErrors);\n            } else if (namespace instanceof InspectorObjectNamespace) {\n                this.dumpInspectorObjectNamespace(namespace, variant, 0, namespace.dumpConfig, logErrors);\n            } else if (namespace instanceof DynamicInspectorObjectNamespace) {\n                this.dumpDynamicInspectorObjectNamespace(variant);\n            } else {\n                throw new TypeError(\"Does not support serializing this type: \" + typeof namespace)\n            }\n        }\n        catch (e) {\n            const message = \"Failed to serialize namespace\";\n\n            this.clearVariant(variant);\n            variant.setVariantType(variant_pb.Variant.Type.VARIANT_ERROR);\n\n            if (logErrors) {\n                variant.setErrorValue(new RookError(e, message).dumps());\n                logger.exception(message, e);\n            }\n        }\n    }\n\n    dumpContainerNamespace(namespace, variant, logErrors) {\n        variant.setVariantType(variant_pb.Variant.Type.VARIANT_NAMESPACE);\n\n        let result = new variant_pb.Variant.Namespace();\n        for (let key of Object.keys(namespace.namespaces)) {\n            let value = new variant_pb.Variant.NamedValue();\n            value.setName(key);\n            value.setValue(this.dumps(namespace.namespaces[key], logErrors));\n\n            result.addAttributes(value);\n        }\n\n        variant.setNamespaceValue(result);\n    }\n\n    dumpJSObjectNamespace(namespace, variant, logErrors) {\n        this.dumpJSObject(namespace.obj, variant, 0, namespace.dumpConfig, logErrors);\n    }\n\n    unsafeDumpJSObject(obj, variant, currentDepth, dumpConfig, logErrors) {\n        if (currentDepth === dumpConfig.maxDepth) {\n            this.dumpMaxDepth(obj, variant, currentDepth, dumpConfig);\n        } else {\n            this.dumpBaseObject(obj, variant, currentDepth, dumpConfig, logErrors);\n\n            if (undefined === obj) {\n                variant.setVariantType(variant_pb.Variant.Type.VARIANT_UNDEFINED);\n                return;\n            }\n\n            if (null === obj) {\n                variant.setVariantType(variant_pb.Variant.Type.VARIANT_NONE);\n                return;\n            }\n\n            if (obj === true || obj === false) {\n                variant.setVariantType(variant_pb.Variant.Type.VARIANT_INT);\n                variant.setIntValue(obj ? 1 : 0);\n                return;\n            }\n\n            if (Number.isInteger(obj)) {\n                if ((obj <= INT32_MAX) && (obj => INT32_MIN)) {\n                    variant.setVariantType(variant_pb.Variant.Type.VARIANT_INT);\n                    variant.setIntValue(obj);\n\n                } else {\n                    if ((obj <= INT64_MAX) && (obj => INT64_MIN)) {\n                        variant.setVariantType(variant_pb.Variant.Type.VARIANT_LONG);\n                        variant.setLongValue(obj);\n                    } else {\n                        variant.setVariantType(variant_pb.Variant.Type.VARIANT_LARGE_INT);\n                        // There are not any clean ways to get a pure number for large strings\n                        let digits = [];\n                        while (obj > 0) {\n                            digits.push(obj % 10);\n                            obj = Math.floor(obj / 10);\n                        }\n\n                        let value = new variant_pb.Variant.LargeInt();\n                        value.setValue(digits.reverse().join(''));\n                        variant.setLargeIntValue(value);\n                    }\n                }\n\n                return;\n            }\n\n            if (isFloat(obj)) {\n                variant.setVariantType(variant_pb.Variant.Type.VARIANT_DOUBLE);\n                variant.setDoubleValue(obj);\n                return;\n            }\n\n            if (typeof obj === 'string' || obj instanceof String) {\n                variant.setVariantType(variant_pb.Variant.Type.VARIANT_STRING);\n\n                let string = new variant_pb.Variant.String();\n                string.setOriginalSize(obj.length);\n\n                if (obj.length > dumpConfig.maxString) {\n                    string.setValue(obj.substring(0, dumpConfig.maxString));\n                } else {\n                    string.setValue(obj);\n                }\n\n                variant.setStringValue(string);\n                return;\n            }\n\n            if (obj instanceof Date) {\n                variant.setVariantType(variant_pb.Variant.Type.VARIANT_TIME);\n\n                let date = new timestamp_pb.Timestamp();\n                date.fromDate(obj);\n\n                variant.setTimeValue(date);\n                return;\n            }\n\n            if (Array.isArray(obj)) {\n                this.dumpArray(obj, variant, currentDepth, dumpConfig, logErrors);\n                return;\n            }\n\n            if (obj instanceof Error) {\n                this.dumpException(obj, variant, currentDepth, dumpConfig, logErrors);\n                return;\n            }\n\n            if (typeof obj === 'function') {\n                variant.setVariantType(variant_pb.Variant.Type.VARIANT_CODE_OBJECT);\n\n                let codeValue = new variant_pb.Variant.CodeObject();\n                codeValue.setName(obj.name);\n\n                variant.setCodeValue(codeValue);\n                return;\n            }\n\n            this.dumpUserClass(obj, variant, currentDepth, dumpConfig, logErrors);\n        }\n    }\n\n    dumpJSObject(obj, variant, currentDepth, dumpConfig, logErrors) {\n        try {\n            this.unsafeDumpJSObject(obj, variant, currentDepth, dumpConfig, logErrors);\n        }\n        catch (e) {\n            const message = \"Failed to serialize object\";\n\n            this.clearVariant(variant);\n            variant.setVariantType(variant_pb.Variant.Type.VARIANT_ERROR);\n\n            if (logErrors) {\n                variant.setErrorValue(new RookError(e, message).dumps());\n                logger.exception(message, e);\n            }\n        }\n    }\n\n    dumpMaxDepth(obj, variant, currentDepth, dumpConfig) {\n        variant.setVariantType(variant_pb.Variant.Type.VARIANT_MAX_DEPTH);\n    }\n\n    dumpBaseObject(obj, variant, currentDepth, dumpConfig) {\n        // Try to get class name from prototype, if possible\n        try {\n            variant.setOriginalType(obj.__proto__.constructor.name)\n        } catch (e) {\n            variant.setOriginalType(typeof obj);\n        }\n\n        if (null === obj || undefined === obj) {\n            return;\n        }\n\n        // Don't dump values of strings or arrays as they cause issues\n        if (typeof obj === 'string' || obj instanceof String) {\n            return;\n        }\n\n        // FUTURE - consider treating objects with a LOT of attributes as collections\n\n        for (let key of Object.keys(obj)) {\n\n            // Protect against primitives pointing to themselves\n            if (obj[key] === obj) {\n                continue;\n            }\n\n            // If it's an Array, ignore it's index attributes\n            if (Array.isArray(obj) && parseInt(key).toString() === key) {\n                continue;\n            }\n\n            let value = new variant_pb.Variant();\n\n            if ('get' in Object.getOwnPropertyDescriptor(obj, key)) {\n                value.setVariantType(variant_pb.Variant.Type.VARIANT_DYNAMIC);\n            } else {\n                this.dumpJSObject(obj[key], value, currentDepth + 1, dumpConfig);\n            }\n\n            let attribute = new variant_pb.Variant.NamedValue();\n            attribute.setName(key);\n            attribute.setValue(value);\n\n            variant.addAttributes(attribute);\n        }\n    }\n\n    dumpArray(obj, variant, currentDepth, dumpConfig, logErrors) {\n        variant.setVariantType(variant_pb.Variant.Type.VARIANT_LIST);\n\n        let list = new variant_pb.Variant.List();\n        list.setType(ListNamespace.getCommonType(list));\n        list.setOriginalSize(obj.length);\n\n        if (currentDepth < dumpConfig.maxCollectionDepth) {\n\n            const maxItems = Math.min(obj.length, dumpConfig.maxWidth);\n            for (let i = 0; i < maxItems; ++i) {\n                let item = new variant_pb.Variant();\n                this.dumpJSObject(obj[i], item, currentDepth + 1, dumpConfig, logErrors);\n                list.addValues(item);\n            }\n        }\n\n        variant.setListValue(list);\n    }\n\n    dumpException(obj, variant, currentDepth, dumpConfig, logErrors) {\n        variant.setVariantType(variant_pb.Variant.Type.VARIANT_OBJECT);\n\n        let messageValue = new variant_pb.Variant();\n        this.dumpJSObject(obj.message, messageValue, currentDepth + 1, dumpConfig, logErrors);\n\n        let messagePair = new variant_pb.Variant.NamedValue();\n        messagePair.setName('message');\n        messagePair.setValue(messageValue);\n        variant.addAttributes(messagePair);\n\n        let stackValue = new variant_pb.Variant();\n        this.dumpJSObject(obj.stack, stackValue, currentDepth + 1, dumpConfig, logErrors);\n\n        let stackPair = new variant_pb.Variant.NamedValue();\n        stackPair.setName('stack');\n        stackPair.setValue(stackValue);\n        variant.addAttributes(stackPair);\n    }\n\n    dumpUserClass(obj, variant, currentDepth, dumpConfig) {\n        variant.setVariantType(variant_pb.Variant.Type.VARIANT_OBJECT);\n    }\n\n    dumpListNamespace(namespace, variant, logErrors) {\n        variant.setVariantType(variant_pb.Variant.Type.VARIANT_LIST);\n        variant.setOriginalType(namespace.originalType);\n\n        let listValue = new variant_pb.Variant.List();\n        listValue.setType(namespace.commonType);\n        listValue.setOriginalSize(namespace.originalSize);\n\n        for (let item of namespace.list) {\n            listValue.addValues(this.dumps(item, logErrors));\n        }\n\n        variant.setListValue(listValue);\n    }\n\n    dumpDictNamespace(namespace, variant, logErrors) {\n        variant.setVariantType(variant_pb.Variant.Type.VARIANT_MAP);\n        variant.setOriginalType(namespace.originalType);\n\n        let dictValue = new variant_pb.Variant.Map();\n        dictValue.setOriginalSize(namespace.originalSize);\n\n        for (let key of Object.keys(namespace.dict)) {\n            let pair = new variant_pb.Variant.Pair();\n            let first = new variant_pb.Variant();\n            let second = new variant_pb.Variant();\n\n            pair.setFirst(this.dumps(new JSObjectNamespace(key), logErrors));\n            pair.setSecond(this.dumps(new JSObjectNamespace(namespace.dict[key]), logErrors));\n\n            dictValue.addPairs(pair);\n        }\n\n        variant.setMapValue(dictValue);\n    }\n\n    unsafeDumpInspectorObjectNamespace(namespace, variant, currentDepth, dumpConfig, logErrors) {\n        if (currentDepth === dumpConfig.maxDepth) {\n            this.dumpMaxDepth(namespace, variant, currentDepth, dumpConfig);\n            return;\n        }\n\n        variant.setOriginalType(namespace.obj.className);\n\n        if (namespace.obj.type === 'function') {\n            variant.setVariantType(variant_pb.Variant.Type.VARIANT_CODE_OBJECT);\n\n            let functionName = '';\n            try {\n                functionName = namespace.readAttribute('name').obj;\n            } catch (e) { }\n\n            let codeValue = new variant_pb.Variant.CodeObject();\n            codeValue.setName(functionName);\n\n            variant.setCodeValue(codeValue);\n            return;\n        }\n\n        switch (namespace.obj.subtype) {\n            case 'array':\n                this.dumpInspectorArray(namespace, variant, currentDepth, dumpConfig);\n                break;\n\n            case 'date':\n                this.dumpInspectorDate(namespace, variant, currentDepth, dumpConfig);\n                break;\n\n            default:\n                variant.setVariantType(variant_pb.Variant.Type.VARIANT_OBJECT);\n        }\n\n        namespace.loadProperties();\n\n        for (let property of namespace.properties) {\n            // If it's an Array, ignore it's index attributes and the length method\n            if (namespace.obj.subtype === 'array' &&\n                (parseInt(property.name).toString() === property.name || property.name === 'length')) {\n                continue;\n            }\n\n            // We don't dump proto automatically as it leads to very large dumps\n            if (property.name === '__proto__') {\n                continue;\n            }\n\n            let item = new variant_pb.Variant();\n\n            if (property.value === null || property.value === undefined) {\n                if ('get' in property) {\n                    this.dumpDynamicInspectorObjectNamespace(item);\n                } else {\n                    throw new RookInspectorUnknownProperty(property);\n                }\n            } else {\n                let obj = InspectorObjectNamespace.getObjectInternal(namespace.inspector, property.value);\n\n                if (obj instanceof InspectorObjectNamespace) {\n                    this.dumpInspectorObjectNamespace(obj, item, currentDepth + 1, dumpConfig, logErrors);\n                } else {\n                    this.dumpJSObject(obj, item, currentDepth + 1, dumpConfig);\n                }\n            }\n\n            let attribute = new variant_pb.Variant.NamedValue();\n            attribute.setName(property.name);\n            attribute.setValue(item);\n\n            variant.addAttributes(attribute);\n        }\n    }\n\n    dumpDynamicInspectorObjectNamespace(variant) {\n        variant.setVariantType(variant_pb.Variant.Type.VARIANT_DYNAMIC);\n    }\n\n    dumpInspectorObjectNamespace(namespace, variant, currentDepth, dumpConfig, logErrors) {\n        try {\n            this.unsafeDumpInspectorObjectNamespace(namespace, variant, currentDepth, dumpConfig, logErrors)\n        } catch (e) {\n            const message = \"Failed to serialize namespace\";\n\n            variant.setVariantType(variant_pb.Variant.Type.VARIANT_ERROR);\n\n            if (logErrors) {\n                variant.setErrorValue(new RookError(e, message).dumps());\n                logger.exception(message, e);\n            }\n        }\n    }\n\n    dumpInspectorArray(namespace, variant, currentDepth, dumpConfig, logErrors) {\n        variant.setVariantType(variant_pb.Variant.Type.VARIANT_LIST);\n\n        const lengthString = namespace.obj.description.match(/\\((\\d+)\\)/)[1];\n        const length = parseInt(lengthString);\n\n        let list = new variant_pb.Variant.List();\n        list.setType(ListNamespace.getCommonType(list));\n        list.setOriginalSize(length);\n\n        const maxItems = Math.min(length, dumpConfig.maxWidth);\n\n        if (currentDepth < dumpConfig.maxCollectionDepth) {\n\n            for (let i = 0; i < maxItems; ++i) {\n                let obj = null;\n\n                // Sparse arrays have missing objects as undefined\n                try {\n                    obj = namespace.readAttribute(i.toString());\n                } catch (e) {\n                    obj = new JSObjectNamespace(undefined);\n                }\n\n                let item = new variant_pb.Variant();\n\n                if (obj instanceof InspectorObjectNamespace) {\n                    this.dumpInspectorObjectNamespace(obj, item, currentDepth + 1, dumpConfig, logErrors);\n                } else {\n                    this.dumpJSObject(obj.obj, item, currentDepth + 1, dumpConfig, logErrors);\n                }\n\n                list.addValues(item);\n            }\n        }\n\n        variant.setListValue(list);\n    }\n\n    dumpInspectorDate(namespace, variant, currentDepth, dumpConfig) {\n        variant.setVariantType(variant_pb.Variant.Type.VARIANT_TIME);\n\n        let date = new timestamp_pb.Timestamp();\n        date.fromDate(new Date(namespace.obj.description));\n\n        variant.setTimeValue(date);\n    }\n\n    clearVariant(variant) {\n        variant.setVariantType(undefined);\n        variant.setOriginalType(undefined);\n        variant.clearAttributesList();\n\n        variant.clearIntValue();\n        variant.clearLongValue();\n        variant.clearDoubleValue();\n        variant.clearStringValue();\n        variant.clearListValue();\n        variant.clearMapValue();\n        variant.clearNamespaceValue();\n        variant.clearErrorValue();\n        variant.clearMessageValue();\n        variant.clearTimeValue();\n        variant.clearCodeValue();\n        variant.clearLargeIntValue();\n        variant.clearComplexValue();\n    }\n}\n"],"file":"NamespaceSerializer.js"}