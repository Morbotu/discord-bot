{"version":3,"sources":["../../src/CircleCiOrbWrapper.js"],"names":["path","require","args","trimmedArguments","process","argv","slice","undefined","endsWith","scriptIndex","ignoreNext","some","arg","index","push","console","log","exit","join","__dirname","concat","kexec","err","code","child_process","proc","spawn","stdio","on","signal","kill","pid"],"mappings":"AAAA;;AACA;;;;;;;;;AAQA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AAEA,IAAIC,IAAI,GAAG,EAAX,C,CACA;;AACA,IAAIC,gBAAgB,GAAGC,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAAvB,C,CACA;;AACA,IAAIH,gBAAgB,CAAC,CAAD,CAAhB,KAAwBI,SAAxB,IAAqCJ,gBAAgB,CAAC,CAAD,CAAhB,CAAoBK,QAApB,CAA6B,MAA7B,CAAzC,EAA8E;AAC1EL,EAAAA,gBAAgB,GAAGA,gBAAgB,CAACG,KAAjB,CAAuB,CAAvB,CAAnB;AACH,C,CAED;;;AACA,IAAIG,WAAW,GAAGF,SAAlB;AACA,IAAIG,UAAU,GAAG,KAAjB;AACAP,gBAAgB,CAACQ,IAAjB,CAAsB,UAASC,GAAT,EAAcC,KAAd,EAAqB;AACvC,MAAIH,UAAJ,EAAgB;AACZ;AACH;;AAED,MAAIE,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAChBV,IAAAA,IAAI,CAACY,IAAL,CAAUF,GAAV;AACH,GAFD,MAEK;AACD,QAAIH,WAAW,KAAKF,SAApB,EAA8B;AAC1BE,MAAAA,WAAW,GAAGI,KAAd;AACH;;AACDH,IAAAA,UAAU,GAAG,IAAb;AACH;AACJ,CAbD;;AAeA,IAAID,WAAW,KAAKF,SAApB,EAA+B;AAC3BQ,EAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ;AACAZ,EAAAA,OAAO,CAACa,IAAR,CAAa,CAAb;AACH,C,CAED;;;AACAf,IAAI,CAACY,IAAL,CAAUd,IAAI,CAACkB,IAAL,CAAUC,SAAV,EAAqB,+BAArB,CAAV;AACAjB,IAAI,GAAGA,IAAI,CAACkB,MAAL,CAAYjB,gBAAgB,CAACG,KAAjB,CAAuBG,WAAvB,CAAZ,CAAP;;AAEA,IAAI;AACA,QAAMY,KAAK,GAAGpB,OAAO,CAAC,OAAD,CAArB;;AACAoB,EAAAA,KAAK,CAACjB,OAAO,CAACC,IAAR,CAAa,CAAb,CAAD,EAAkBH,IAAlB,CAAL;AACH,CAHD,CAGE,OAAOoB,GAAP,EAAY;AACV,MAAIA,GAAG,CAACC,IAAJ,KAAa,kBAAjB,EAAqC,MAAMD,GAAN;;AAErC,QAAME,aAAa,GAAGvB,OAAO,CAAC,eAAD,CAA7B;;AACA,QAAMwB,IAAI,GAAGD,aAAa,CAACE,KAAd,CAAoBtB,OAAO,CAACC,IAAR,CAAa,CAAb,CAApB,EAAqCH,IAArC,EAA2C;AACpDyB,IAAAA,KAAK,EAAE;AAD6C,GAA3C,CAAb;AAGAF,EAAAA,IAAI,CAACG,EAAL,CAAQ,MAAR,EAAgB,UAASL,IAAT,EAAeM,MAAf,EAAuB;AACnCzB,IAAAA,OAAO,CAACwB,EAAR,CAAW,MAAX,EAAmB,YAAW;AAC1B,UAAIC,MAAJ,EAAY;AACRzB,QAAAA,OAAO,CAAC0B,IAAR,CAAa1B,OAAO,CAAC2B,GAArB,EAA0BF,MAA1B;AACH,OAFD,MAEO;AACHzB,QAAAA,OAAO,CAACa,IAAR,CAAaM,IAAb;AACH;AACJ,KAND;AAOH,GARD;AASAnB,EAAAA,OAAO,CAACwB,EAAR,CAAW,QAAX,EAAqB,MAAM;AACvBH,IAAAA,IAAI,CAACK,IAAL,CAAU,QAAV;AACA1B,IAAAA,OAAO,CAACa,IAAR,CAAa,CAAb;AACH,GAHD;AAIH","sourcesContent":["#!/usr/bin/env node\n/**\n * This wrapper file checks for any node flags and and spawns a new process with these flags\n * Since this process has no flags and the user might want to add them.\n * The new process will execute CircleCiOrbWrapperInternal.js that will change the command line and\n * will let the original command to run\n * this logic is very similar to babel-node\n */\n\nconst path = require(\"path\");\n\nlet args = [];\n// trip the \"node CircleCiOrbWrapper.js\" arguments\nlet trimmedArguments = process.argv.slice(2);\n// if user accidentally used node as parameter - we trim it\nif (trimmedArguments[0] !== undefined && trimmedArguments[0].endsWith(\"node\")){\n    trimmedArguments = trimmedArguments.slice(1);\n}\n\n// Look for the first argument that does not start with - which will be the users script\nlet scriptIndex = undefined;\nlet ignoreNext = false;\ntrimmedArguments.some(function(arg, index) {\n    if (ignoreNext) {\n        return;\n    }\n\n    if (arg[0] === \"-\") {\n        args.push(arg)\n    }else{\n        if (scriptIndex === undefined){\n            scriptIndex = index;\n        }\n        ignoreNext = true;\n    }\n});\n\nif (scriptIndex === undefined) {\n    console.log(\"Bad command line - could not find script to run\");\n    process.exit(1);\n}\n\n//args is holding all the node flags, lets add our second wrapper and the rest of the arguments\nargs.push(path.join(__dirname, \"CircleCiOrbWrapperInternal.js\"));\nargs = args.concat(trimmedArguments.slice(scriptIndex));\n\ntry {\n    const kexec = require(\"kexec\");\n    kexec(process.argv[0], args);\n} catch (err) {\n    if (err.code !== \"MODULE_NOT_FOUND\") throw err;\n\n    const child_process = require(\"child_process\");\n    const proc = child_process.spawn(process.argv[0], args, {\n        stdio: \"inherit\",\n    });\n    proc.on(\"exit\", function(code, signal) {\n        process.on(\"exit\", function() {\n            if (signal) {\n                process.kill(process.pid, signal);\n            } else {\n                process.exit(code);\n            }\n        });\n    });\n    process.on(\"SIGINT\", () => {\n        proc.kill(\"SIGINT\");\n        process.exit(1);\n    });\n}"],"file":"CircleCiOrbWrapper.js"}