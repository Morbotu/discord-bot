"use strict";

// source: variant.proto

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');

var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');

goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.com.rookout.Error', null, global);
goog.exportSymbol('proto.com.rookout.Variant', null, global);
goog.exportSymbol('proto.com.rookout.Variant.Binary', null, global);
goog.exportSymbol('proto.com.rookout.Variant.CodeObject', null, global);
goog.exportSymbol('proto.com.rookout.Variant.Complex', null, global);
goog.exportSymbol('proto.com.rookout.Variant.Enumeration', null, global);
goog.exportSymbol('proto.com.rookout.Variant.FormattedMessage', null, global);
goog.exportSymbol('proto.com.rookout.Variant.LargeInt', null, global);
goog.exportSymbol('proto.com.rookout.Variant.List', null, global);
goog.exportSymbol('proto.com.rookout.Variant.Map', null, global);
goog.exportSymbol('proto.com.rookout.Variant.NamedValue', null, global);
goog.exportSymbol('proto.com.rookout.Variant.Namespace', null, global);
goog.exportSymbol('proto.com.rookout.Variant.Pair', null, global);
goog.exportSymbol('proto.com.rookout.Variant.String', null, global);
goog.exportSymbol('proto.com.rookout.Variant.Type', null, global);
goog.exportSymbol('proto.com.rookout.Variant.ValueCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */

proto.com.rookout.Error = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.Error, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.rookout.Error.displayName = 'proto.com.rookout.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.Variant = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.rookout.Variant.repeatedFields_, proto.com.rookout.Variant.oneofGroups_);
};

goog.inherits(proto.com.rookout.Variant, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.rookout.Variant.displayName = 'proto.com.rookout.Variant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.Variant.NamedValue = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.Variant.NamedValue, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.rookout.Variant.NamedValue.displayName = 'proto.com.rookout.Variant.NamedValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.Variant.Binary = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.Variant.Binary, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.rookout.Variant.Binary.displayName = 'proto.com.rookout.Variant.Binary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.Variant.String = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.Variant.String, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.rookout.Variant.String.displayName = 'proto.com.rookout.Variant.String';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.Variant.List = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.rookout.Variant.List.repeatedFields_, null);
};

goog.inherits(proto.com.rookout.Variant.List, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.rookout.Variant.List.displayName = 'proto.com.rookout.Variant.List';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.Variant.Pair = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.Variant.Pair, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.rookout.Variant.Pair.displayName = 'proto.com.rookout.Variant.Pair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.Variant.Map = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.rookout.Variant.Map.repeatedFields_, null);
};

goog.inherits(proto.com.rookout.Variant.Map, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.rookout.Variant.Map.displayName = 'proto.com.rookout.Variant.Map';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.Variant.Namespace = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.rookout.Variant.Namespace.repeatedFields_, null);
};

goog.inherits(proto.com.rookout.Variant.Namespace, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.rookout.Variant.Namespace.displayName = 'proto.com.rookout.Variant.Namespace';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.Variant.FormattedMessage = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.Variant.FormattedMessage, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.rookout.Variant.FormattedMessage.displayName = 'proto.com.rookout.Variant.FormattedMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.Variant.CodeObject = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.Variant.CodeObject, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.rookout.Variant.CodeObject.displayName = 'proto.com.rookout.Variant.CodeObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.Variant.LargeInt = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.Variant.LargeInt, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.rookout.Variant.LargeInt.displayName = 'proto.com.rookout.Variant.LargeInt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.Variant.Complex = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.Variant.Complex, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.rookout.Variant.Complex.displayName = 'proto.com.rookout.Variant.Complex';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.com.rookout.Variant.Enumeration = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.com.rookout.Variant.Enumeration, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.rookout.Variant.Enumeration.displayName = 'proto.com.rookout.Variant.Enumeration';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.Error.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.Error.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.Error} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.Error.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      message: jspb.Message.getFieldWithDefault(msg, 1, ""),
      type: jspb.Message.getFieldWithDefault(msg, 2, ""),
      parameters: (f = msg.getParameters()) && proto.com.rookout.Variant.toObject(includeInstance, f),
      exc: (f = msg.getExc()) && proto.com.rookout.Variant.toObject(includeInstance, f),
      traceback: (f = msg.getTraceback()) && proto.com.rookout.Variant.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.Error}
 */


proto.com.rookout.Error.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.Error();
  return proto.com.rookout.Error.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.Error}
 */


proto.com.rookout.Error.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setMessage(value);
        break;

      case 2:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setType(value);
        break;

      case 3:
        var value = new proto.com.rookout.Variant();
        reader.readMessage(value, proto.com.rookout.Variant.deserializeBinaryFromReader);
        msg.setParameters(value);
        break;

      case 4:
        var value = new proto.com.rookout.Variant();
        reader.readMessage(value, proto.com.rookout.Variant.deserializeBinaryFromReader);
        msg.setExc(value);
        break;

      case 5:
        var value = new proto.com.rookout.Variant();
        reader.readMessage(value, proto.com.rookout.Variant.deserializeBinaryFromReader);
        msg.setTraceback(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.Error.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.Error.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getMessage();

  if (f.length > 0) {
    writer.writeString(1, f);
  }

  f = message.getType();

  if (f.length > 0) {
    writer.writeString(2, f);
  }

  f = message.getParameters();

  if (f != null) {
    writer.writeMessage(3, f, proto.com.rookout.Variant.serializeBinaryToWriter);
  }

  f = message.getExc();

  if (f != null) {
    writer.writeMessage(4, f, proto.com.rookout.Variant.serializeBinaryToWriter);
  }

  f = message.getTraceback();

  if (f != null) {
    writer.writeMessage(5, f, proto.com.rookout.Variant.serializeBinaryToWriter);
  }
};
/**
 * optional string message = 1;
 * @return {string}
 */


proto.com.rookout.Error.prototype.getMessage = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 1, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.com.rookout.Error} returns this
 */


proto.com.rookout.Error.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string type = 2;
 * @return {string}
 */


proto.com.rookout.Error.prototype.getType = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 2, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.com.rookout.Error} returns this
 */


proto.com.rookout.Error.prototype.setType = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional Variant parameters = 3;
 * @return {?proto.com.rookout.Variant}
 */


proto.com.rookout.Error.prototype.getParameters = function () {
  return (
    /** @type{?proto.com.rookout.Variant} */
    jspb.Message.getWrapperField(this, proto.com.rookout.Variant, 3)
  );
};
/**
 * @param {?proto.com.rookout.Variant|undefined} value
 * @return {!proto.com.rookout.Error} returns this
*/


proto.com.rookout.Error.prototype.setParameters = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.com.rookout.Error} returns this
 */


proto.com.rookout.Error.prototype.clearParameters = function () {
  return this.setParameters(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.com.rookout.Error.prototype.hasParameters = function () {
  return jspb.Message.getField(this, 3) != null;
};
/**
 * optional Variant exc = 4;
 * @return {?proto.com.rookout.Variant}
 */


proto.com.rookout.Error.prototype.getExc = function () {
  return (
    /** @type{?proto.com.rookout.Variant} */
    jspb.Message.getWrapperField(this, proto.com.rookout.Variant, 4)
  );
};
/**
 * @param {?proto.com.rookout.Variant|undefined} value
 * @return {!proto.com.rookout.Error} returns this
*/


proto.com.rookout.Error.prototype.setExc = function (value) {
  return jspb.Message.setWrapperField(this, 4, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.com.rookout.Error} returns this
 */


proto.com.rookout.Error.prototype.clearExc = function () {
  return this.setExc(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.com.rookout.Error.prototype.hasExc = function () {
  return jspb.Message.getField(this, 4) != null;
};
/**
 * optional Variant traceback = 5;
 * @return {?proto.com.rookout.Variant}
 */


proto.com.rookout.Error.prototype.getTraceback = function () {
  return (
    /** @type{?proto.com.rookout.Variant} */
    jspb.Message.getWrapperField(this, proto.com.rookout.Variant, 5)
  );
};
/**
 * @param {?proto.com.rookout.Variant|undefined} value
 * @return {!proto.com.rookout.Error} returns this
*/


proto.com.rookout.Error.prototype.setTraceback = function (value) {
  return jspb.Message.setWrapperField(this, 5, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.com.rookout.Error} returns this
 */


proto.com.rookout.Error.prototype.clearTraceback = function () {
  return this.setTraceback(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.com.rookout.Error.prototype.hasTraceback = function () {
  return jspb.Message.getField(this, 5) != null;
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */


proto.com.rookout.Variant.repeatedFields_ = [3];
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */

proto.com.rookout.Variant.oneofGroups_ = [[11, 12, 13, 14, 15, 16, 17, 19, 20, 23, 24, 26, 27, 28, 31]];
/**
 * @enum {number}
 */

proto.com.rookout.Variant.ValueCase = {
  VALUE_NOT_SET: 0,
  INT_VALUE: 11,
  LONG_VALUE: 12,
  DOUBLE_VALUE: 13,
  BINARY_VALUE: 14,
  STRING_VALUE: 15,
  LIST_VALUE: 16,
  MAP_VALUE: 17,
  NAMESPACE_VALUE: 19,
  ERROR_VALUE: 20,
  MESSAGE_VALUE: 23,
  TIME_VALUE: 24,
  CODE_VALUE: 26,
  LARGE_INT_VALUE: 27,
  COMPLEX_VALUE: 28,
  ENUM_VALUE: 31
};
/**
 * @return {proto.com.rookout.Variant.ValueCase}
 */

proto.com.rookout.Variant.prototype.getValueCase = function () {
  return (
    /** @type {proto.com.rookout.Variant.ValueCase} */
    jspb.Message.computeOneofCase(this, proto.com.rookout.Variant.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.Variant.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.Variant.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.Variant} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.Variant.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      variantType: jspb.Message.getFieldWithDefault(msg, 1, 0),
      originalType: jspb.Message.getFieldWithDefault(msg, 2, ""),
      attributesList: jspb.Message.toObjectList(msg.getAttributesList(), proto.com.rookout.Variant.NamedValue.toObject, includeInstance),
      intValue: jspb.Message.getFieldWithDefault(msg, 11, 0),
      longValue: jspb.Message.getFieldWithDefault(msg, 12, 0),
      doubleValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
      binaryValue: (f = msg.getBinaryValue()) && proto.com.rookout.Variant.Binary.toObject(includeInstance, f),
      stringValue: (f = msg.getStringValue()) && proto.com.rookout.Variant.String.toObject(includeInstance, f),
      listValue: (f = msg.getListValue()) && proto.com.rookout.Variant.List.toObject(includeInstance, f),
      mapValue: (f = msg.getMapValue()) && proto.com.rookout.Variant.Map.toObject(includeInstance, f),
      namespaceValue: (f = msg.getNamespaceValue()) && proto.com.rookout.Variant.Namespace.toObject(includeInstance, f),
      errorValue: (f = msg.getErrorValue()) && proto.com.rookout.Error.toObject(includeInstance, f),
      messageValue: (f = msg.getMessageValue()) && proto.com.rookout.Variant.FormattedMessage.toObject(includeInstance, f),
      timeValue: (f = msg.getTimeValue()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
      codeValue: (f = msg.getCodeValue()) && proto.com.rookout.Variant.CodeObject.toObject(includeInstance, f),
      largeIntValue: (f = msg.getLargeIntValue()) && proto.com.rookout.Variant.LargeInt.toObject(includeInstance, f),
      complexValue: (f = msg.getComplexValue()) && proto.com.rookout.Variant.Complex.toObject(includeInstance, f),
      enumValue: (f = msg.getEnumValue()) && proto.com.rookout.Variant.Enumeration.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.Variant}
 */


proto.com.rookout.Variant.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.Variant();
  return proto.com.rookout.Variant.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.Variant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.Variant}
 */


proto.com.rookout.Variant.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {!proto.com.rookout.Variant.Type} */
        reader.readEnum();
        msg.setVariantType(value);
        break;

      case 2:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setOriginalType(value);
        break;

      case 3:
        var value = new proto.com.rookout.Variant.NamedValue();
        reader.readMessage(value, proto.com.rookout.Variant.NamedValue.deserializeBinaryFromReader);
        msg.addAttributes(value);
        break;

      case 11:
        var value =
        /** @type {number} */
        reader.readInt32();
        msg.setIntValue(value);
        break;

      case 12:
        var value =
        /** @type {number} */
        reader.readInt64();
        msg.setLongValue(value);
        break;

      case 13:
        var value =
        /** @type {number} */
        reader.readDouble();
        msg.setDoubleValue(value);
        break;

      case 14:
        var value = new proto.com.rookout.Variant.Binary();
        reader.readMessage(value, proto.com.rookout.Variant.Binary.deserializeBinaryFromReader);
        msg.setBinaryValue(value);
        break;

      case 15:
        var value = new proto.com.rookout.Variant.String();
        reader.readMessage(value, proto.com.rookout.Variant.String.deserializeBinaryFromReader);
        msg.setStringValue(value);
        break;

      case 16:
        var value = new proto.com.rookout.Variant.List();
        reader.readMessage(value, proto.com.rookout.Variant.List.deserializeBinaryFromReader);
        msg.setListValue(value);
        break;

      case 17:
        var value = new proto.com.rookout.Variant.Map();
        reader.readMessage(value, proto.com.rookout.Variant.Map.deserializeBinaryFromReader);
        msg.setMapValue(value);
        break;

      case 19:
        var value = new proto.com.rookout.Variant.Namespace();
        reader.readMessage(value, proto.com.rookout.Variant.Namespace.deserializeBinaryFromReader);
        msg.setNamespaceValue(value);
        break;

      case 20:
        var value = new proto.com.rookout.Error();
        reader.readMessage(value, proto.com.rookout.Error.deserializeBinaryFromReader);
        msg.setErrorValue(value);
        break;

      case 23:
        var value = new proto.com.rookout.Variant.FormattedMessage();
        reader.readMessage(value, proto.com.rookout.Variant.FormattedMessage.deserializeBinaryFromReader);
        msg.setMessageValue(value);
        break;

      case 24:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
        msg.setTimeValue(value);
        break;

      case 26:
        var value = new proto.com.rookout.Variant.CodeObject();
        reader.readMessage(value, proto.com.rookout.Variant.CodeObject.deserializeBinaryFromReader);
        msg.setCodeValue(value);
        break;

      case 27:
        var value = new proto.com.rookout.Variant.LargeInt();
        reader.readMessage(value, proto.com.rookout.Variant.LargeInt.deserializeBinaryFromReader);
        msg.setLargeIntValue(value);
        break;

      case 28:
        var value = new proto.com.rookout.Variant.Complex();
        reader.readMessage(value, proto.com.rookout.Variant.Complex.deserializeBinaryFromReader);
        msg.setComplexValue(value);
        break;

      case 31:
        var value = new proto.com.rookout.Variant.Enumeration();
        reader.readMessage(value, proto.com.rookout.Variant.Enumeration.deserializeBinaryFromReader);
        msg.setEnumValue(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.Variant.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.Variant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.Variant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.Variant.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getVariantType();

  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }

  f = message.getOriginalType();

  if (f.length > 0) {
    writer.writeString(2, f);
  }

  f = message.getAttributesList();

  if (f.length > 0) {
    writer.writeRepeatedMessage(3, f, proto.com.rookout.Variant.NamedValue.serializeBinaryToWriter);
  }

  f =
  /** @type {number} */
  jspb.Message.getField(message, 11);

  if (f != null) {
    writer.writeInt32(11, f);
  }

  f =
  /** @type {number} */
  jspb.Message.getField(message, 12);

  if (f != null) {
    writer.writeInt64(12, f);
  }

  f =
  /** @type {number} */
  jspb.Message.getField(message, 13);

  if (f != null) {
    writer.writeDouble(13, f);
  }

  f = message.getBinaryValue();

  if (f != null) {
    writer.writeMessage(14, f, proto.com.rookout.Variant.Binary.serializeBinaryToWriter);
  }

  f = message.getStringValue();

  if (f != null) {
    writer.writeMessage(15, f, proto.com.rookout.Variant.String.serializeBinaryToWriter);
  }

  f = message.getListValue();

  if (f != null) {
    writer.writeMessage(16, f, proto.com.rookout.Variant.List.serializeBinaryToWriter);
  }

  f = message.getMapValue();

  if (f != null) {
    writer.writeMessage(17, f, proto.com.rookout.Variant.Map.serializeBinaryToWriter);
  }

  f = message.getNamespaceValue();

  if (f != null) {
    writer.writeMessage(19, f, proto.com.rookout.Variant.Namespace.serializeBinaryToWriter);
  }

  f = message.getErrorValue();

  if (f != null) {
    writer.writeMessage(20, f, proto.com.rookout.Error.serializeBinaryToWriter);
  }

  f = message.getMessageValue();

  if (f != null) {
    writer.writeMessage(23, f, proto.com.rookout.Variant.FormattedMessage.serializeBinaryToWriter);
  }

  f = message.getTimeValue();

  if (f != null) {
    writer.writeMessage(24, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
  }

  f = message.getCodeValue();

  if (f != null) {
    writer.writeMessage(26, f, proto.com.rookout.Variant.CodeObject.serializeBinaryToWriter);
  }

  f = message.getLargeIntValue();

  if (f != null) {
    writer.writeMessage(27, f, proto.com.rookout.Variant.LargeInt.serializeBinaryToWriter);
  }

  f = message.getComplexValue();

  if (f != null) {
    writer.writeMessage(28, f, proto.com.rookout.Variant.Complex.serializeBinaryToWriter);
  }

  f = message.getEnumValue();

  if (f != null) {
    writer.writeMessage(31, f, proto.com.rookout.Variant.Enumeration.serializeBinaryToWriter);
  }
};
/**
 * @enum {number}
 */


proto.com.rookout.Variant.Type = {
  VARIANT_NONE: 0,
  VARIANT_INT: 1,
  VARIANT_LONG: 2,
  VARIANT_DOUBLE: 3,
  VARIANT_BINARY: 4,
  VARIANT_STRING: 5,
  VARIANT_LIST: 6,
  VARIANT_MAP: 7,
  VARIANT_OBJECT: 8,
  VARIANT_NAMESPACE: 9,
  VARIANT_ERROR: 10,
  VARIANT_NOT_SUPPORTED: 11,
  VARIANT_MAX_DEPTH: 12,
  VARIANT_FORMATTED_MESSAGE: 13,
  VARIANT_TIME: 14,
  VARIANT_UKNOWN_OBJECT: 15,
  VARIANT_CODE_OBJECT: 16,
  VARIANT_LARGE_INT: 17,
  VARIANT_COMPLEX: 18,
  VARIANT_UNDEFINED: 19,
  VARIANT_DYNAMIC: 20,
  VARIANT_ENUM: 21
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.Variant.NamedValue.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.Variant.NamedValue.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.Variant.NamedValue} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.Variant.NamedValue.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      name: jspb.Message.getFieldWithDefault(msg, 1, ""),
      value: (f = msg.getValue()) && proto.com.rookout.Variant.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.Variant.NamedValue}
 */


proto.com.rookout.Variant.NamedValue.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.Variant.NamedValue();
  return proto.com.rookout.Variant.NamedValue.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.Variant.NamedValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.Variant.NamedValue}
 */


proto.com.rookout.Variant.NamedValue.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setName(value);
        break;

      case 2:
        var value = new proto.com.rookout.Variant();
        reader.readMessage(value, proto.com.rookout.Variant.deserializeBinaryFromReader);
        msg.setValue(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.Variant.NamedValue.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.Variant.NamedValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.Variant.NamedValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.Variant.NamedValue.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getName();

  if (f.length > 0) {
    writer.writeString(1, f);
  }

  f = message.getValue();

  if (f != null) {
    writer.writeMessage(2, f, proto.com.rookout.Variant.serializeBinaryToWriter);
  }
};
/**
 * optional string name = 1;
 * @return {string}
 */


proto.com.rookout.Variant.NamedValue.prototype.getName = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 1, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.com.rookout.Variant.NamedValue} returns this
 */


proto.com.rookout.Variant.NamedValue.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional Variant value = 2;
 * @return {?proto.com.rookout.Variant}
 */


proto.com.rookout.Variant.NamedValue.prototype.getValue = function () {
  return (
    /** @type{?proto.com.rookout.Variant} */
    jspb.Message.getWrapperField(this, proto.com.rookout.Variant, 2)
  );
};
/**
 * @param {?proto.com.rookout.Variant|undefined} value
 * @return {!proto.com.rookout.Variant.NamedValue} returns this
*/


proto.com.rookout.Variant.NamedValue.prototype.setValue = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.com.rookout.Variant.NamedValue} returns this
 */


proto.com.rookout.Variant.NamedValue.prototype.clearValue = function () {
  return this.setValue(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.com.rookout.Variant.NamedValue.prototype.hasValue = function () {
  return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.Variant.Binary.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.Variant.Binary.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.Variant.Binary} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.Variant.Binary.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      originalSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
      value: msg.getValue_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.Variant.Binary}
 */


proto.com.rookout.Variant.Binary.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.Variant.Binary();
  return proto.com.rookout.Variant.Binary.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.Variant.Binary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.Variant.Binary}
 */


proto.com.rookout.Variant.Binary.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readInt32();
        msg.setOriginalSize(value);
        break;

      case 2:
        var value =
        /** @type {!Uint8Array} */
        reader.readBytes();
        msg.setValue(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.Variant.Binary.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.Variant.Binary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.Variant.Binary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.Variant.Binary.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getOriginalSize();

  if (f !== 0) {
    writer.writeInt32(1, f);
  }

  f = message.getValue_asU8();

  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};
/**
 * optional int32 original_size = 1;
 * @return {number}
 */


proto.com.rookout.Variant.Binary.prototype.getOriginalSize = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.com.rookout.Variant.Binary} returns this
 */


proto.com.rookout.Variant.Binary.prototype.setOriginalSize = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */


proto.com.rookout.Variant.Binary.prototype.getValue = function () {
  return (
    /** @type {!(string|Uint8Array)} */
    jspb.Message.getFieldWithDefault(this, 2, "")
  );
};
/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */


proto.com.rookout.Variant.Binary.prototype.getValue_asB64 = function () {
  return (
    /** @type {string} */
    jspb.Message.bytesAsB64(this.getValue())
  );
};
/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */


proto.com.rookout.Variant.Binary.prototype.getValue_asU8 = function () {
  return (
    /** @type {!Uint8Array} */
    jspb.Message.bytesAsU8(this.getValue())
  );
};
/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.com.rookout.Variant.Binary} returns this
 */


proto.com.rookout.Variant.Binary.prototype.setValue = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.Variant.String.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.Variant.String.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.Variant.String} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.Variant.String.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      originalSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
      value: jspb.Message.getFieldWithDefault(msg, 2, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.Variant.String}
 */


proto.com.rookout.Variant.String.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.Variant.String();
  return proto.com.rookout.Variant.String.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.Variant.String} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.Variant.String}
 */


proto.com.rookout.Variant.String.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readInt32();
        msg.setOriginalSize(value);
        break;

      case 2:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setValue(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.Variant.String.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.Variant.String.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.Variant.String} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.Variant.String.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getOriginalSize();

  if (f !== 0) {
    writer.writeInt32(1, f);
  }

  f = message.getValue();

  if (f.length > 0) {
    writer.writeString(2, f);
  }
};
/**
 * optional int32 original_size = 1;
 * @return {number}
 */


proto.com.rookout.Variant.String.prototype.getOriginalSize = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.com.rookout.Variant.String} returns this
 */


proto.com.rookout.Variant.String.prototype.setOriginalSize = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional string value = 2;
 * @return {string}
 */


proto.com.rookout.Variant.String.prototype.getValue = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 2, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.com.rookout.Variant.String} returns this
 */


proto.com.rookout.Variant.String.prototype.setValue = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */


proto.com.rookout.Variant.List.repeatedFields_ = [3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.Variant.List.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.Variant.List.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.Variant.List} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.Variant.List.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      type: jspb.Message.getFieldWithDefault(msg, 1, ""),
      originalSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
      valuesList: jspb.Message.toObjectList(msg.getValuesList(), proto.com.rookout.Variant.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.Variant.List}
 */


proto.com.rookout.Variant.List.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.Variant.List();
  return proto.com.rookout.Variant.List.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.Variant.List} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.Variant.List}
 */


proto.com.rookout.Variant.List.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setType(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readInt32();
        msg.setOriginalSize(value);
        break;

      case 3:
        var value = new proto.com.rookout.Variant();
        reader.readMessage(value, proto.com.rookout.Variant.deserializeBinaryFromReader);
        msg.addValues(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.Variant.List.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.Variant.List.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.Variant.List} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.Variant.List.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getType();

  if (f.length > 0) {
    writer.writeString(1, f);
  }

  f = message.getOriginalSize();

  if (f !== 0) {
    writer.writeInt32(2, f);
  }

  f = message.getValuesList();

  if (f.length > 0) {
    writer.writeRepeatedMessage(3, f, proto.com.rookout.Variant.serializeBinaryToWriter);
  }
};
/**
 * optional string type = 1;
 * @return {string}
 */


proto.com.rookout.Variant.List.prototype.getType = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 1, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.com.rookout.Variant.List} returns this
 */


proto.com.rookout.Variant.List.prototype.setType = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional int32 original_size = 2;
 * @return {number}
 */


proto.com.rookout.Variant.List.prototype.getOriginalSize = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.com.rookout.Variant.List} returns this
 */


proto.com.rookout.Variant.List.prototype.setOriginalSize = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * repeated Variant values = 3;
 * @return {!Array<!proto.com.rookout.Variant>}
 */


proto.com.rookout.Variant.List.prototype.getValuesList = function () {
  return (
    /** @type{!Array<!proto.com.rookout.Variant>} */
    jspb.Message.getRepeatedWrapperField(this, proto.com.rookout.Variant, 3)
  );
};
/**
 * @param {!Array<!proto.com.rookout.Variant>} value
 * @return {!proto.com.rookout.Variant.List} returns this
*/


proto.com.rookout.Variant.List.prototype.setValuesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};
/**
 * @param {!proto.com.rookout.Variant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.rookout.Variant}
 */


proto.com.rookout.Variant.List.prototype.addValues = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.com.rookout.Variant, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.rookout.Variant.List} returns this
 */


proto.com.rookout.Variant.List.prototype.clearValuesList = function () {
  return this.setValuesList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.Variant.Pair.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.Variant.Pair.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.Variant.Pair} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.Variant.Pair.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      first: (f = msg.getFirst()) && proto.com.rookout.Variant.toObject(includeInstance, f),
      second: (f = msg.getSecond()) && proto.com.rookout.Variant.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.Variant.Pair}
 */


proto.com.rookout.Variant.Pair.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.Variant.Pair();
  return proto.com.rookout.Variant.Pair.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.Variant.Pair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.Variant.Pair}
 */


proto.com.rookout.Variant.Pair.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value = new proto.com.rookout.Variant();
        reader.readMessage(value, proto.com.rookout.Variant.deserializeBinaryFromReader);
        msg.setFirst(value);
        break;

      case 2:
        var value = new proto.com.rookout.Variant();
        reader.readMessage(value, proto.com.rookout.Variant.deserializeBinaryFromReader);
        msg.setSecond(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.Variant.Pair.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.Variant.Pair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.Variant.Pair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.Variant.Pair.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getFirst();

  if (f != null) {
    writer.writeMessage(1, f, proto.com.rookout.Variant.serializeBinaryToWriter);
  }

  f = message.getSecond();

  if (f != null) {
    writer.writeMessage(2, f, proto.com.rookout.Variant.serializeBinaryToWriter);
  }
};
/**
 * optional Variant first = 1;
 * @return {?proto.com.rookout.Variant}
 */


proto.com.rookout.Variant.Pair.prototype.getFirst = function () {
  return (
    /** @type{?proto.com.rookout.Variant} */
    jspb.Message.getWrapperField(this, proto.com.rookout.Variant, 1)
  );
};
/**
 * @param {?proto.com.rookout.Variant|undefined} value
 * @return {!proto.com.rookout.Variant.Pair} returns this
*/


proto.com.rookout.Variant.Pair.prototype.setFirst = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.com.rookout.Variant.Pair} returns this
 */


proto.com.rookout.Variant.Pair.prototype.clearFirst = function () {
  return this.setFirst(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.com.rookout.Variant.Pair.prototype.hasFirst = function () {
  return jspb.Message.getField(this, 1) != null;
};
/**
 * optional Variant second = 2;
 * @return {?proto.com.rookout.Variant}
 */


proto.com.rookout.Variant.Pair.prototype.getSecond = function () {
  return (
    /** @type{?proto.com.rookout.Variant} */
    jspb.Message.getWrapperField(this, proto.com.rookout.Variant, 2)
  );
};
/**
 * @param {?proto.com.rookout.Variant|undefined} value
 * @return {!proto.com.rookout.Variant.Pair} returns this
*/


proto.com.rookout.Variant.Pair.prototype.setSecond = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.com.rookout.Variant.Pair} returns this
 */


proto.com.rookout.Variant.Pair.prototype.clearSecond = function () {
  return this.setSecond(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.com.rookout.Variant.Pair.prototype.hasSecond = function () {
  return jspb.Message.getField(this, 2) != null;
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */


proto.com.rookout.Variant.Map.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.Variant.Map.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.Variant.Map.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.Variant.Map} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.Variant.Map.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      originalSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
      pairsList: jspb.Message.toObjectList(msg.getPairsList(), proto.com.rookout.Variant.Pair.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.Variant.Map}
 */


proto.com.rookout.Variant.Map.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.Variant.Map();
  return proto.com.rookout.Variant.Map.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.Variant.Map} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.Variant.Map}
 */


proto.com.rookout.Variant.Map.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readInt32();
        msg.setOriginalSize(value);
        break;

      case 2:
        var value = new proto.com.rookout.Variant.Pair();
        reader.readMessage(value, proto.com.rookout.Variant.Pair.deserializeBinaryFromReader);
        msg.addPairs(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.Variant.Map.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.Variant.Map.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.Variant.Map} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.Variant.Map.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getOriginalSize();

  if (f !== 0) {
    writer.writeInt32(1, f);
  }

  f = message.getPairsList();

  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.com.rookout.Variant.Pair.serializeBinaryToWriter);
  }
};
/**
 * optional int32 original_size = 1;
 * @return {number}
 */


proto.com.rookout.Variant.Map.prototype.getOriginalSize = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.com.rookout.Variant.Map} returns this
 */


proto.com.rookout.Variant.Map.prototype.setOriginalSize = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * repeated Pair pairs = 2;
 * @return {!Array<!proto.com.rookout.Variant.Pair>}
 */


proto.com.rookout.Variant.Map.prototype.getPairsList = function () {
  return (
    /** @type{!Array<!proto.com.rookout.Variant.Pair>} */
    jspb.Message.getRepeatedWrapperField(this, proto.com.rookout.Variant.Pair, 2)
  );
};
/**
 * @param {!Array<!proto.com.rookout.Variant.Pair>} value
 * @return {!proto.com.rookout.Variant.Map} returns this
*/


proto.com.rookout.Variant.Map.prototype.setPairsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.com.rookout.Variant.Pair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.rookout.Variant.Pair}
 */


proto.com.rookout.Variant.Map.prototype.addPairs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.com.rookout.Variant.Pair, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.rookout.Variant.Map} returns this
 */


proto.com.rookout.Variant.Map.prototype.clearPairsList = function () {
  return this.setPairsList([]);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */


proto.com.rookout.Variant.Namespace.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.Variant.Namespace.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.Variant.Namespace.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.Variant.Namespace} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.Variant.Namespace.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      attributesList: jspb.Message.toObjectList(msg.getAttributesList(), proto.com.rookout.Variant.NamedValue.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.Variant.Namespace}
 */


proto.com.rookout.Variant.Namespace.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.Variant.Namespace();
  return proto.com.rookout.Variant.Namespace.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.Variant.Namespace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.Variant.Namespace}
 */


proto.com.rookout.Variant.Namespace.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value = new proto.com.rookout.Variant.NamedValue();
        reader.readMessage(value, proto.com.rookout.Variant.NamedValue.deserializeBinaryFromReader);
        msg.addAttributes(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.Variant.Namespace.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.Variant.Namespace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.Variant.Namespace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.Variant.Namespace.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAttributesList();

  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.com.rookout.Variant.NamedValue.serializeBinaryToWriter);
  }
};
/**
 * repeated NamedValue attributes = 1;
 * @return {!Array<!proto.com.rookout.Variant.NamedValue>}
 */


proto.com.rookout.Variant.Namespace.prototype.getAttributesList = function () {
  return (
    /** @type{!Array<!proto.com.rookout.Variant.NamedValue>} */
    jspb.Message.getRepeatedWrapperField(this, proto.com.rookout.Variant.NamedValue, 1)
  );
};
/**
 * @param {!Array<!proto.com.rookout.Variant.NamedValue>} value
 * @return {!proto.com.rookout.Variant.Namespace} returns this
*/


proto.com.rookout.Variant.Namespace.prototype.setAttributesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.com.rookout.Variant.NamedValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.rookout.Variant.NamedValue}
 */


proto.com.rookout.Variant.Namespace.prototype.addAttributes = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.rookout.Variant.NamedValue, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.rookout.Variant.Namespace} returns this
 */


proto.com.rookout.Variant.Namespace.prototype.clearAttributesList = function () {
  return this.setAttributesList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.Variant.FormattedMessage.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.Variant.FormattedMessage.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.Variant.FormattedMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.Variant.FormattedMessage.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      message: jspb.Message.getFieldWithDefault(msg, 1, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.Variant.FormattedMessage}
 */


proto.com.rookout.Variant.FormattedMessage.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.Variant.FormattedMessage();
  return proto.com.rookout.Variant.FormattedMessage.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.Variant.FormattedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.Variant.FormattedMessage}
 */


proto.com.rookout.Variant.FormattedMessage.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setMessage(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.Variant.FormattedMessage.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.Variant.FormattedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.Variant.FormattedMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.Variant.FormattedMessage.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getMessage();

  if (f.length > 0) {
    writer.writeString(1, f);
  }
};
/**
 * optional string message = 1;
 * @return {string}
 */


proto.com.rookout.Variant.FormattedMessage.prototype.getMessage = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 1, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.com.rookout.Variant.FormattedMessage} returns this
 */


proto.com.rookout.Variant.FormattedMessage.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.Variant.CodeObject.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.Variant.CodeObject.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.Variant.CodeObject} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.Variant.CodeObject.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      name: jspb.Message.getFieldWithDefault(msg, 1, ""),
      module: jspb.Message.getFieldWithDefault(msg, 2, ""),
      filename: jspb.Message.getFieldWithDefault(msg, 3, ""),
      lineno: jspb.Message.getFieldWithDefault(msg, 4, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.Variant.CodeObject}
 */


proto.com.rookout.Variant.CodeObject.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.Variant.CodeObject();
  return proto.com.rookout.Variant.CodeObject.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.Variant.CodeObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.Variant.CodeObject}
 */


proto.com.rookout.Variant.CodeObject.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setName(value);
        break;

      case 2:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setModule(value);
        break;

      case 3:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setFilename(value);
        break;

      case 4:
        var value =
        /** @type {number} */
        reader.readUint32();
        msg.setLineno(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.Variant.CodeObject.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.Variant.CodeObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.Variant.CodeObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.Variant.CodeObject.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getName();

  if (f.length > 0) {
    writer.writeString(1, f);
  }

  f = message.getModule();

  if (f.length > 0) {
    writer.writeString(2, f);
  }

  f = message.getFilename();

  if (f.length > 0) {
    writer.writeString(3, f);
  }

  f = message.getLineno();

  if (f !== 0) {
    writer.writeUint32(4, f);
  }
};
/**
 * optional string name = 1;
 * @return {string}
 */


proto.com.rookout.Variant.CodeObject.prototype.getName = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 1, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.com.rookout.Variant.CodeObject} returns this
 */


proto.com.rookout.Variant.CodeObject.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string module = 2;
 * @return {string}
 */


proto.com.rookout.Variant.CodeObject.prototype.getModule = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 2, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.com.rookout.Variant.CodeObject} returns this
 */


proto.com.rookout.Variant.CodeObject.prototype.setModule = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string filename = 3;
 * @return {string}
 */


proto.com.rookout.Variant.CodeObject.prototype.getFilename = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 3, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.com.rookout.Variant.CodeObject} returns this
 */


proto.com.rookout.Variant.CodeObject.prototype.setFilename = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional uint32 lineno = 4;
 * @return {number}
 */


proto.com.rookout.Variant.CodeObject.prototype.getLineno = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.com.rookout.Variant.CodeObject} returns this
 */


proto.com.rookout.Variant.CodeObject.prototype.setLineno = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.Variant.LargeInt.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.Variant.LargeInt.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.Variant.LargeInt} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.Variant.LargeInt.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      value: jspb.Message.getFieldWithDefault(msg, 1, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.Variant.LargeInt}
 */


proto.com.rookout.Variant.LargeInt.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.Variant.LargeInt();
  return proto.com.rookout.Variant.LargeInt.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.Variant.LargeInt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.Variant.LargeInt}
 */


proto.com.rookout.Variant.LargeInt.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setValue(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.Variant.LargeInt.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.Variant.LargeInt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.Variant.LargeInt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.Variant.LargeInt.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getValue();

  if (f.length > 0) {
    writer.writeString(1, f);
  }
};
/**
 * optional string value = 1;
 * @return {string}
 */


proto.com.rookout.Variant.LargeInt.prototype.getValue = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 1, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.com.rookout.Variant.LargeInt} returns this
 */


proto.com.rookout.Variant.LargeInt.prototype.setValue = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.Variant.Complex.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.Variant.Complex.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.Variant.Complex} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.Variant.Complex.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      real: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
      imaginary: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.Variant.Complex}
 */


proto.com.rookout.Variant.Complex.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.Variant.Complex();
  return proto.com.rookout.Variant.Complex.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.Variant.Complex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.Variant.Complex}
 */


proto.com.rookout.Variant.Complex.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readDouble();
        msg.setReal(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readDouble();
        msg.setImaginary(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.Variant.Complex.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.Variant.Complex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.Variant.Complex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.Variant.Complex.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getReal();

  if (f !== 0.0) {
    writer.writeDouble(1, f);
  }

  f = message.getImaginary();

  if (f !== 0.0) {
    writer.writeDouble(2, f);
  }
};
/**
 * optional double real = 1;
 * @return {number}
 */


proto.com.rookout.Variant.Complex.prototype.getReal = function () {
  return (
    /** @type {number} */
    jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0)
  );
};
/**
 * @param {number} value
 * @return {!proto.com.rookout.Variant.Complex} returns this
 */


proto.com.rookout.Variant.Complex.prototype.setReal = function (value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};
/**
 * optional double imaginary = 2;
 * @return {number}
 */


proto.com.rookout.Variant.Complex.prototype.getImaginary = function () {
  return (
    /** @type {number} */
    jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0)
  );
};
/**
 * @param {number} value
 * @return {!proto.com.rookout.Variant.Complex} returns this
 */


proto.com.rookout.Variant.Complex.prototype.setImaginary = function (value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.com.rookout.Variant.Enumeration.prototype.toObject = function (opt_includeInstance) {
    return proto.com.rookout.Variant.Enumeration.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.com.rookout.Variant.Enumeration} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.com.rookout.Variant.Enumeration.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      stringValue: jspb.Message.getFieldWithDefault(msg, 1, ""),
      ordinalValue: jspb.Message.getFieldWithDefault(msg, 2, 0),
      typeName: jspb.Message.getFieldWithDefault(msg, 3, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.rookout.Variant.Enumeration}
 */


proto.com.rookout.Variant.Enumeration.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.rookout.Variant.Enumeration();
  return proto.com.rookout.Variant.Enumeration.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.rookout.Variant.Enumeration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.rookout.Variant.Enumeration}
 */


proto.com.rookout.Variant.Enumeration.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setStringValue(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readInt32();
        msg.setOrdinalValue(value);
        break;

      case 3:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setTypeName(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.com.rookout.Variant.Enumeration.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.com.rookout.Variant.Enumeration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.rookout.Variant.Enumeration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.com.rookout.Variant.Enumeration.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getStringValue();

  if (f.length > 0) {
    writer.writeString(1, f);
  }

  f = message.getOrdinalValue();

  if (f !== 0) {
    writer.writeInt32(2, f);
  }

  f = message.getTypeName();

  if (f.length > 0) {
    writer.writeString(3, f);
  }
};
/**
 * optional string string_value = 1;
 * @return {string}
 */


proto.com.rookout.Variant.Enumeration.prototype.getStringValue = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 1, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.com.rookout.Variant.Enumeration} returns this
 */


proto.com.rookout.Variant.Enumeration.prototype.setStringValue = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional int32 ordinal_value = 2;
 * @return {number}
 */


proto.com.rookout.Variant.Enumeration.prototype.getOrdinalValue = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.com.rookout.Variant.Enumeration} returns this
 */


proto.com.rookout.Variant.Enumeration.prototype.setOrdinalValue = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional string type_name = 3;
 * @return {string}
 */


proto.com.rookout.Variant.Enumeration.prototype.getTypeName = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 3, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.com.rookout.Variant.Enumeration} returns this
 */


proto.com.rookout.Variant.Enumeration.prototype.setTypeName = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional Type variant_type = 1;
 * @return {!proto.com.rookout.Variant.Type}
 */


proto.com.rookout.Variant.prototype.getVariantType = function () {
  return (
    /** @type {!proto.com.rookout.Variant.Type} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/**
 * @param {!proto.com.rookout.Variant.Type} value
 * @return {!proto.com.rookout.Variant} returns this
 */


proto.com.rookout.Variant.prototype.setVariantType = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * optional string original_type = 2;
 * @return {string}
 */


proto.com.rookout.Variant.prototype.getOriginalType = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 2, "")
  );
};
/**
 * @param {string} value
 * @return {!proto.com.rookout.Variant} returns this
 */


proto.com.rookout.Variant.prototype.setOriginalType = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * repeated NamedValue attributes = 3;
 * @return {!Array<!proto.com.rookout.Variant.NamedValue>}
 */


proto.com.rookout.Variant.prototype.getAttributesList = function () {
  return (
    /** @type{!Array<!proto.com.rookout.Variant.NamedValue>} */
    jspb.Message.getRepeatedWrapperField(this, proto.com.rookout.Variant.NamedValue, 3)
  );
};
/**
 * @param {!Array<!proto.com.rookout.Variant.NamedValue>} value
 * @return {!proto.com.rookout.Variant} returns this
*/


proto.com.rookout.Variant.prototype.setAttributesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};
/**
 * @param {!proto.com.rookout.Variant.NamedValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.rookout.Variant.NamedValue}
 */


proto.com.rookout.Variant.prototype.addAttributes = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.com.rookout.Variant.NamedValue, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.rookout.Variant} returns this
 */


proto.com.rookout.Variant.prototype.clearAttributesList = function () {
  return this.setAttributesList([]);
};
/**
 * optional int32 int_value = 11;
 * @return {number}
 */


proto.com.rookout.Variant.prototype.getIntValue = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 11, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.com.rookout.Variant} returns this
 */


proto.com.rookout.Variant.prototype.setIntValue = function (value) {
  return jspb.Message.setOneofField(this, 11, proto.com.rookout.Variant.oneofGroups_[0], value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.com.rookout.Variant} returns this
 */


proto.com.rookout.Variant.prototype.clearIntValue = function () {
  return jspb.Message.setOneofField(this, 11, proto.com.rookout.Variant.oneofGroups_[0], undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.com.rookout.Variant.prototype.hasIntValue = function () {
  return jspb.Message.getField(this, 11) != null;
};
/**
 * optional int64 long_value = 12;
 * @return {number}
 */


proto.com.rookout.Variant.prototype.getLongValue = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 12, 0)
  );
};
/**
 * @param {number} value
 * @return {!proto.com.rookout.Variant} returns this
 */


proto.com.rookout.Variant.prototype.setLongValue = function (value) {
  return jspb.Message.setOneofField(this, 12, proto.com.rookout.Variant.oneofGroups_[0], value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.com.rookout.Variant} returns this
 */


proto.com.rookout.Variant.prototype.clearLongValue = function () {
  return jspb.Message.setOneofField(this, 12, proto.com.rookout.Variant.oneofGroups_[0], undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.com.rookout.Variant.prototype.hasLongValue = function () {
  return jspb.Message.getField(this, 12) != null;
};
/**
 * optional double double_value = 13;
 * @return {number}
 */


proto.com.rookout.Variant.prototype.getDoubleValue = function () {
  return (
    /** @type {number} */
    jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0)
  );
};
/**
 * @param {number} value
 * @return {!proto.com.rookout.Variant} returns this
 */


proto.com.rookout.Variant.prototype.setDoubleValue = function (value) {
  return jspb.Message.setOneofField(this, 13, proto.com.rookout.Variant.oneofGroups_[0], value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.com.rookout.Variant} returns this
 */


proto.com.rookout.Variant.prototype.clearDoubleValue = function () {
  return jspb.Message.setOneofField(this, 13, proto.com.rookout.Variant.oneofGroups_[0], undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.com.rookout.Variant.prototype.hasDoubleValue = function () {
  return jspb.Message.getField(this, 13) != null;
};
/**
 * optional Binary binary_value = 14;
 * @return {?proto.com.rookout.Variant.Binary}
 */


proto.com.rookout.Variant.prototype.getBinaryValue = function () {
  return (
    /** @type{?proto.com.rookout.Variant.Binary} */
    jspb.Message.getWrapperField(this, proto.com.rookout.Variant.Binary, 14)
  );
};
/**
 * @param {?proto.com.rookout.Variant.Binary|undefined} value
 * @return {!proto.com.rookout.Variant} returns this
*/


proto.com.rookout.Variant.prototype.setBinaryValue = function (value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.com.rookout.Variant.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.com.rookout.Variant} returns this
 */


proto.com.rookout.Variant.prototype.clearBinaryValue = function () {
  return this.setBinaryValue(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.com.rookout.Variant.prototype.hasBinaryValue = function () {
  return jspb.Message.getField(this, 14) != null;
};
/**
 * optional String string_value = 15;
 * @return {?proto.com.rookout.Variant.String}
 */


proto.com.rookout.Variant.prototype.getStringValue = function () {
  return (
    /** @type{?proto.com.rookout.Variant.String} */
    jspb.Message.getWrapperField(this, proto.com.rookout.Variant.String, 15)
  );
};
/**
 * @param {?proto.com.rookout.Variant.String|undefined} value
 * @return {!proto.com.rookout.Variant} returns this
*/


proto.com.rookout.Variant.prototype.setStringValue = function (value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.com.rookout.Variant.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.com.rookout.Variant} returns this
 */


proto.com.rookout.Variant.prototype.clearStringValue = function () {
  return this.setStringValue(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.com.rookout.Variant.prototype.hasStringValue = function () {
  return jspb.Message.getField(this, 15) != null;
};
/**
 * optional List list_value = 16;
 * @return {?proto.com.rookout.Variant.List}
 */


proto.com.rookout.Variant.prototype.getListValue = function () {
  return (
    /** @type{?proto.com.rookout.Variant.List} */
    jspb.Message.getWrapperField(this, proto.com.rookout.Variant.List, 16)
  );
};
/**
 * @param {?proto.com.rookout.Variant.List|undefined} value
 * @return {!proto.com.rookout.Variant} returns this
*/


proto.com.rookout.Variant.prototype.setListValue = function (value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.com.rookout.Variant.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.com.rookout.Variant} returns this
 */


proto.com.rookout.Variant.prototype.clearListValue = function () {
  return this.setListValue(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.com.rookout.Variant.prototype.hasListValue = function () {
  return jspb.Message.getField(this, 16) != null;
};
/**
 * optional Map map_value = 17;
 * @return {?proto.com.rookout.Variant.Map}
 */


proto.com.rookout.Variant.prototype.getMapValue = function () {
  return (
    /** @type{?proto.com.rookout.Variant.Map} */
    jspb.Message.getWrapperField(this, proto.com.rookout.Variant.Map, 17)
  );
};
/**
 * @param {?proto.com.rookout.Variant.Map|undefined} value
 * @return {!proto.com.rookout.Variant} returns this
*/


proto.com.rookout.Variant.prototype.setMapValue = function (value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.com.rookout.Variant.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.com.rookout.Variant} returns this
 */


proto.com.rookout.Variant.prototype.clearMapValue = function () {
  return this.setMapValue(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.com.rookout.Variant.prototype.hasMapValue = function () {
  return jspb.Message.getField(this, 17) != null;
};
/**
 * optional Namespace namespace_value = 19;
 * @return {?proto.com.rookout.Variant.Namespace}
 */


proto.com.rookout.Variant.prototype.getNamespaceValue = function () {
  return (
    /** @type{?proto.com.rookout.Variant.Namespace} */
    jspb.Message.getWrapperField(this, proto.com.rookout.Variant.Namespace, 19)
  );
};
/**
 * @param {?proto.com.rookout.Variant.Namespace|undefined} value
 * @return {!proto.com.rookout.Variant} returns this
*/


proto.com.rookout.Variant.prototype.setNamespaceValue = function (value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.com.rookout.Variant.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.com.rookout.Variant} returns this
 */


proto.com.rookout.Variant.prototype.clearNamespaceValue = function () {
  return this.setNamespaceValue(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.com.rookout.Variant.prototype.hasNamespaceValue = function () {
  return jspb.Message.getField(this, 19) != null;
};
/**
 * optional Error error_value = 20;
 * @return {?proto.com.rookout.Error}
 */


proto.com.rookout.Variant.prototype.getErrorValue = function () {
  return (
    /** @type{?proto.com.rookout.Error} */
    jspb.Message.getWrapperField(this, proto.com.rookout.Error, 20)
  );
};
/**
 * @param {?proto.com.rookout.Error|undefined} value
 * @return {!proto.com.rookout.Variant} returns this
*/


proto.com.rookout.Variant.prototype.setErrorValue = function (value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.com.rookout.Variant.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.com.rookout.Variant} returns this
 */


proto.com.rookout.Variant.prototype.clearErrorValue = function () {
  return this.setErrorValue(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.com.rookout.Variant.prototype.hasErrorValue = function () {
  return jspb.Message.getField(this, 20) != null;
};
/**
 * optional FormattedMessage message_value = 23;
 * @return {?proto.com.rookout.Variant.FormattedMessage}
 */


proto.com.rookout.Variant.prototype.getMessageValue = function () {
  return (
    /** @type{?proto.com.rookout.Variant.FormattedMessage} */
    jspb.Message.getWrapperField(this, proto.com.rookout.Variant.FormattedMessage, 23)
  );
};
/**
 * @param {?proto.com.rookout.Variant.FormattedMessage|undefined} value
 * @return {!proto.com.rookout.Variant} returns this
*/


proto.com.rookout.Variant.prototype.setMessageValue = function (value) {
  return jspb.Message.setOneofWrapperField(this, 23, proto.com.rookout.Variant.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.com.rookout.Variant} returns this
 */


proto.com.rookout.Variant.prototype.clearMessageValue = function () {
  return this.setMessageValue(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.com.rookout.Variant.prototype.hasMessageValue = function () {
  return jspb.Message.getField(this, 23) != null;
};
/**
 * optional google.protobuf.Timestamp time_value = 24;
 * @return {?proto.google.protobuf.Timestamp}
 */


proto.com.rookout.Variant.prototype.getTimeValue = function () {
  return (
    /** @type{?proto.google.protobuf.Timestamp} */
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 24)
  );
};
/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.com.rookout.Variant} returns this
*/


proto.com.rookout.Variant.prototype.setTimeValue = function (value) {
  return jspb.Message.setOneofWrapperField(this, 24, proto.com.rookout.Variant.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.com.rookout.Variant} returns this
 */


proto.com.rookout.Variant.prototype.clearTimeValue = function () {
  return this.setTimeValue(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.com.rookout.Variant.prototype.hasTimeValue = function () {
  return jspb.Message.getField(this, 24) != null;
};
/**
 * optional CodeObject code_value = 26;
 * @return {?proto.com.rookout.Variant.CodeObject}
 */


proto.com.rookout.Variant.prototype.getCodeValue = function () {
  return (
    /** @type{?proto.com.rookout.Variant.CodeObject} */
    jspb.Message.getWrapperField(this, proto.com.rookout.Variant.CodeObject, 26)
  );
};
/**
 * @param {?proto.com.rookout.Variant.CodeObject|undefined} value
 * @return {!proto.com.rookout.Variant} returns this
*/


proto.com.rookout.Variant.prototype.setCodeValue = function (value) {
  return jspb.Message.setOneofWrapperField(this, 26, proto.com.rookout.Variant.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.com.rookout.Variant} returns this
 */


proto.com.rookout.Variant.prototype.clearCodeValue = function () {
  return this.setCodeValue(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.com.rookout.Variant.prototype.hasCodeValue = function () {
  return jspb.Message.getField(this, 26) != null;
};
/**
 * optional LargeInt large_int_value = 27;
 * @return {?proto.com.rookout.Variant.LargeInt}
 */


proto.com.rookout.Variant.prototype.getLargeIntValue = function () {
  return (
    /** @type{?proto.com.rookout.Variant.LargeInt} */
    jspb.Message.getWrapperField(this, proto.com.rookout.Variant.LargeInt, 27)
  );
};
/**
 * @param {?proto.com.rookout.Variant.LargeInt|undefined} value
 * @return {!proto.com.rookout.Variant} returns this
*/


proto.com.rookout.Variant.prototype.setLargeIntValue = function (value) {
  return jspb.Message.setOneofWrapperField(this, 27, proto.com.rookout.Variant.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.com.rookout.Variant} returns this
 */


proto.com.rookout.Variant.prototype.clearLargeIntValue = function () {
  return this.setLargeIntValue(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.com.rookout.Variant.prototype.hasLargeIntValue = function () {
  return jspb.Message.getField(this, 27) != null;
};
/**
 * optional Complex complex_value = 28;
 * @return {?proto.com.rookout.Variant.Complex}
 */


proto.com.rookout.Variant.prototype.getComplexValue = function () {
  return (
    /** @type{?proto.com.rookout.Variant.Complex} */
    jspb.Message.getWrapperField(this, proto.com.rookout.Variant.Complex, 28)
  );
};
/**
 * @param {?proto.com.rookout.Variant.Complex|undefined} value
 * @return {!proto.com.rookout.Variant} returns this
*/


proto.com.rookout.Variant.prototype.setComplexValue = function (value) {
  return jspb.Message.setOneofWrapperField(this, 28, proto.com.rookout.Variant.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.com.rookout.Variant} returns this
 */


proto.com.rookout.Variant.prototype.clearComplexValue = function () {
  return this.setComplexValue(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.com.rookout.Variant.prototype.hasComplexValue = function () {
  return jspb.Message.getField(this, 28) != null;
};
/**
 * optional Enumeration enum_value = 31;
 * @return {?proto.com.rookout.Variant.Enumeration}
 */


proto.com.rookout.Variant.prototype.getEnumValue = function () {
  return (
    /** @type{?proto.com.rookout.Variant.Enumeration} */
    jspb.Message.getWrapperField(this, proto.com.rookout.Variant.Enumeration, 31)
  );
};
/**
 * @param {?proto.com.rookout.Variant.Enumeration|undefined} value
 * @return {!proto.com.rookout.Variant} returns this
*/


proto.com.rookout.Variant.prototype.setEnumValue = function (value) {
  return jspb.Message.setOneofWrapperField(this, 31, proto.com.rookout.Variant.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.com.rookout.Variant} returns this
 */


proto.com.rookout.Variant.prototype.clearEnumValue = function () {
  return this.setEnumValue(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */


proto.com.rookout.Variant.prototype.hasEnumValue = function () {
  return jspb.Message.getField(this, 31) != null;
};

goog.object.extend(exports, proto.com.rookout);
//# sourceMappingURL=variant_pb.js.map